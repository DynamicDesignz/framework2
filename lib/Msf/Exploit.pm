#!/usr/bin/perl
###############

##
#         Name: Exploit.pm
#       Author: H D Moore <hdm [at] metasploit.com>
#      Version: $Revision$
#      License:
#
#      This file is part of the Metasploit Exploit Framework
#      and is subject to the same licenses and copyrights as
#      the rest of this package.
#
##

package Msf::Exploit;
$VERSION = 2.0;
use strict;
use base 'Msf::Module';

my $defaults =
{
  'Payload'     => undef,
};

sub new {
  my $class = shift;
  my $hash = @_ ? shift : { };
  $hash->{'_InfoDefaults'} = $defaults;
  my $self = $class->SUPER::new($hash);
  $self->SetDefaults($defaults);
  return($self);
}

sub Payload     { my $self = shift; return $self->_Info->{'Payload'}; }
sub Targets     { my $self = shift; return $self->_Info->{'Targets'}; }


# Default fallthrough methods
sub Exploit {
  my $self = shift;
  $self->PrintLine('[*] No exploit method has been defined for this module.');
}

sub Check {
  my $self = shift;
  $self->PrintLine('[*] No check has been implemented for this module.');
}

sub TargetsList {
    my $self = shift;
    my $targets = $self->Targets;
    my @targets = ();

    return @targets if ref($targets) ne 'ARRAY';

    my $i = 0;
    foreach my $target (@{$targets}) { $targets[$i++] = $target->[0] }
    return(@targets);
}


# We have this so the module can override it, and make decisions based on arch
# etc (access _Payload)
sub PayloadPrependEncoder {
  my $self = shift;
  return($self->{'Info'}->{'Payload'}->{'PrependEncoder'});
}
sub PayloadPrepend {
  my $self = shift;
  return($self->{'Info'}->{'Payload'}->{'Prepend'});
}
sub PayloadAppend {
  my $self = shift;
  return($self->{'Info'}->{'Payload'}->{'Append'});
}
sub PayloadSpace {
  my $self = shift;
  return($self->{'Info'}->{'Payload'}->{'Space'});
}
sub PayloadBadChars {
  my $self = shift;
  return($self->{'Info'}->{'Payload'}->{'BadChars'});
}
sub PayloadMinNops {
  my $self = shift;
  return($self->{'Info'}->{'Payload'}->{'MinNops'});
}
sub PayloadMaxNops {
  my $self = shift;
  return($self->{'Info'}->{'Payload'}->{'MaxNops'});
}


1;
