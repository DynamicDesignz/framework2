SNORT
======

The key to avoiding detection by snort is misdirection. The http modules and
decoders are very robust, but the system was designed to only report a single
event for any given packet. While this doesn't allow us to avoid detection
completely, it does let us mask our attack as a much less dangerous event.

With version 2.1.0 and below, one of the easiest ways to avoid correct
detection is to trigger a preprocessor alert. The preprocessors perform
various normalization and sanity checks at the protocol level, if any of
these checks cause the preprocess to throw an alert, all process of the
current packet stops. The trick here is to find a preprocessor event that
both look looks benign and doesn't break the exploit request. The Snort 
development team is working on a fix for the first-out issue with
preprocessors for the next release.

To avoid signature detection for UDP-based exploits, we need to find another
UDP rule which contains a longer content: match string than the signature
for our exploit. We also require the ability to stuff arbitrary data into
the UDP packet in such a way that it doesn't break the exploit. Finally, we
modify the exploit so that the longer match string is embedded into
the request, causing it to be reported under a different signature.

Web-based attacks are bit more difficult; the HTTP preprocessor does a very
good job of both normalizing the data and narrowing the signature window down
to specific HTTP fields. Many of the signatures use the uricontent: keyword
to look for specific strings in the actual URL. Again, the trick here is to 
find another uricontent signature that is longer than our exploit's signature.
Then we need to embed this other uri into the url in a way that avoids
normalization but results in a valid exploit request. This is not always 
possible, however specific vulnerabilities can be reliably exploited and
masked through this technique.

The Metasploit Framework includes an example of HTTP masking in the 
iis50_nsiislog_post exploit module. When the SnortMask advanced option
is set, the module uses the content-match trick to disguise the exploit
as an attempt to access Outlook Web Access.

