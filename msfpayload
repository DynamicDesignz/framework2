#!/usr/bin/perl
###############

##
#         Name: msfpayload
#       Author: H D Moore <hdm [at] metasploit.com>
#      Version: $Revision$
#  Description: Command line interface for generating Metasploit payloads
#      License:
#
#      This file is part of the Metasploit Exploit Framework
#      and is subject to the same licenses and copyrights as
#      the rest of this package.
#
##

require 5.6.0;

use strict;

use FindBin qw{$Bin};
use POSIX;

use lib "$Bin/lib";
use Msf::TextUI;
use Pex;
use Getopt::Std;

Msf::UI::ActiveStateSucks();

my $ui = Msf::TextUI->new($Bin);
my $FRAMEVERSION = $ui->Version;
my $VERSION = '$Revision$';

my %opts;
getopts('hv', \%opts);
Version() if($opts{'v'});

$ui->SetTempEnv('_MsfPayload', 1);
#$ui->SetTempEnv('DebugLevel', 0);

my $exploits = { };
my $payloads = { };
my $exploitsIndex = $ui->LoadExploits;
my $payloadsIndex = $ui->LoadPayloads;
my $encoders = $ui->LoadEncoders;
my $nops     = $ui->LoadNops;

foreach my $key (keys(%{$payloadsIndex})) {
    $payloads->{$payloadsIndex->{$key}->Name} = $payloadsIndex->{$key};
}

foreach my $key (keys(%{$exploitsIndex})) {
    $exploits->{$exploitsIndex->{$key}->Name} = $exploitsIndex->{$key};
}

$ui->SetTempEnv('_Exploits', $exploitsIndex);
$ui->SetTempEnv('_Payloads', $payloadsIndex);
$ui->SetTempEnv('_Encoders', $encoders);
$ui->SetTempEnv('_Nops', $nops);

my $sel = shift(@ARGV);
my $p = $payloads->{$sel};
Usage() if($opts{'h'});
Usage() if ! $p;

my $action = uc(pop(@ARGV));

foreach my $opt (@ARGV) {
  $ui->SetTempEnv(split('=', $opt));
}

$ui->SetTempEnv('_Exploit', $exploits->{'Tester'});
$ui->SetTempEnv('_PayloadName', $sel);
$ui->SetTempEnv('_Payload', $p);

if (! $action || $action =~ /^S/)
{
    print "\n" . $ui->DumpPayloadSummary($p);
    exit(0);
}

Usage() if $action !~ /^C|^P|^R/;

my $s = $ui->Encode;
if (! $s)
{
    print "Error: " . $ui->Error() . "\n";
    exit(0);
}

if ($action =~ /^R/) { print $s->RawPayload; exit; }

if ($p->Multistage)
{
    print STDERR "Warning: Multistage payloads only return first stage\n\n";
}

my $r = $action =~ /^C/ ? Pex::Text::BufferC($s->RawPayload) : Pex::Text::BufferPerl($s->RawPayload);

print $r;
exit(0);

sub Usage
{
    print STDERR "\n   Usage: $0 <payload> [var=val] <S|C|P|R>\n\n";
    print STDERR "Payloads: \n";
    foreach my $p (sort(keys(%{$payloads})))
    {
        print STDERR "  $p" . (" " x (25 - length($p))) . $payloads->{$p}->Description . "\n";
    }
    print STDERR "\n";
    exit(0);
}
sub Version {
    print STDERR qq{
   Framework Version:  $FRAMEVERSION
  Msfconsole Version:  $VERSION

};
  exit(0);
}
