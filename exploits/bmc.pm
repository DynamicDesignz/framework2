package Msf::Exploit::bmc;
use base "Msf::Exploit";
use strict;

my $advanced = { };

my $info =
{
    'Name'  => 'SOSCKS TEST',
    'Version'  => '1.0',
    'Authors' => [ 'Brian Caswell <bmc [at] shmoo.com> [Artistic License]', ],
    'Arch'  => [ 'x86' ],
    'OS'    => [ 'win2000', 'win32' ],
    'Priv'  => 0,
    'UserOpts'  => {
                    'RHOST' => [1, 'ADDR', 'The target address'],
                    'RPORT' => [1, 'PORT', 'The target port', 80],
                    'SSL'   => [0, 'BOOL', 'Use SSL'],
                },

    'Description'  =>  "This is a test of the SOCKS foo",
    'Refs'  =>  [ 'http://www.shmoo.com/~bmc/' ],
};

sub new {
  my $class = shift;
  my $self = $class->SUPER::new({'Info' => $info, 'Advanced' => $advanced}, @_);
  return($self);
}

sub Check {
    my $self = shift;
    my $target_host = $self->GetVar('RHOST');
    my $target_port = $self->GetVar('RPORT');
    
    my $s = Msf::Socket->new( { "SSL" => $self->GetVar("SSL") } 
    );

    if (! $s->tcp($target_host, $target_port))
    {
        $self->SetError($s->get_error);
        return undef;
    }
 
    $s->send("GET / HTTP/1.1\r\nHost: $target_host:$target_port\r\n\r\n");

    my $r = $s->recv(5);

    if ($r =~ /html/)
    {
        $self->PrintLine("[*] it worked !");
        return(1);
    } else {
        $self->PrintLine("It didn't work!");
        return(0);
    }
}

sub Exploit {
    my $self = shift;
    my $target_host = $self->GetVar('RHOST');
    my $target_port = $self->GetVar('RPORT');
    
    my $s = Msf::Socket->new( { "SSL" => $self->GetVar("SSL"), } );

    if (! $s->tcp($target_host, $target_port))
    {
        $self->SetError($s->get_error);
        return undef;
    }
 
    $s->send("GET / HTTP/1.1\r\nHost: $target_host:$target_port\r\n\r\n");

    my $r = $s->recv(5);

    if ($r =~ /html/)
    {
        $self->PrintLine("[*] it worked !");
        return(1);
    } else {
        $self->PrintLine("It didn't work!");
        return(0);
    }
}

1;
