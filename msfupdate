#!/usr/bin/perl
###############

require 5.6.0;
use strict;
use vars qw{$SSL_SUPPORT};

use FindBin qw{$RealBin};
use Getopt::Std;
use IO::Socket;
use IO::Select;
use POSIX;

no utf8;

my $VERSION      = '$Revision$';
my $FRAMEWORK    = '2.3';
my ($REV)        = $VERSION =~ m/\$Revisio.:\s+([^\s]+)/;

my $UPDATE_HOST  = 'metasploit.com';
my $UPDATE_PATH  = '/projects/Framework/updates/msfupdate.html';
my $SSL_VERIFIED = 0;
my $SSL_ISSUER   = '/C=US/ST=Texas/L=San Antonio/O=The Metasploit Project/OU=Development/CN=Metasploit CA/emailAddress=cacert@metasploit.com';
my $SSL_CERTS    = "$RealBin/docs";

select(STDOUT); $|++;
        
# Determine if SSL support is enabled
BEGIN
{
    if (eval "require Net::SSLeay")
    {
        Net::SSLeay->import();
        Net::SSLeay::load_error_strings();
        Net::SSLeay::SSLeay_add_ssl_algorithms();
        Net::SSLeay::randomize();
        $SSL_SUPPORT++;
    }
}

my %opts;
getopts('hrvusmaxfU', \%opts);

if ($opts{v}) {
    print "Msfupdate Version: $REV\n";
    print "Framework Version: $FRAMEWORK\n";
    exit(0);
}

if ($opts{h} || (! $opts{m} && ! $opts{r} && ! $opts{u} && ! $opts{U})) {
    Usage();
}

chdir($RealBin);

my ($old_data, $now_data, $new_data);
my ($old, $now, $new);
my ($mod, $upx, $upd);


print "[*] Calculating local file checksums...\n";
$now_data = ScanFiles('.');
print "\n";

if (! -r '.current') {
    WriteFile('.current', $now_data);
    $old_data = $now_data;
} 
else {
    $old_data = ReadFile('.current');
}

if ($opts{r}) {
    print "[*] The local file hash has been rebuilt\n";
    WriteFile('.current', $now_data);
    exit(0);
}

# Allow the user to disable SSL mode entirely
if ($opts{f}) {
    $SSL_SUPPORT = 0;
}

# Display a big nasty warning for non-SSL unless -x is specified
if ($opts{u} || $opts{U}) {
    if (! $opts{x} && ! $SSL_SUPPORT) {
        print "[*] WARNING: The Net::SSLeay module is not installed.\n";
        print "    The update process will fall back to plain HTTP,\n";
        print "    this may allow a malicious attacker to inject\n";
        print "    hostile code into your system.\n";
        print "\n";
        print "Continue anyways (yes or no) ";
        my $resp;
        while ($resp !~ /yes|no/i) {
            print "> ";
            $resp = <STDIN>;
            chomp($resp);
        }
        print "\n";
        
        if ($resp !~ /yes/i) {
            print "[*] The update process has been cancelled\n";
            exit(0);
        }
    }
    
    $new_data = DownloadFile($UPDATE_HOST, "$UPDATE_PATH/.current");
}

$now = Hashit($now_data);
$old = Hashit($old_data);
$new = Hashit($new_data);

$mod = Diff($old, $now);
$upx = Diff($old, $new);
$upd = Diff($now, $new);

if ($opts{m}) {
    if (! keys(%{$mod})) {
        print "[*] No modifications since the last update\n";
        exit(0);
    }
    
    print "[*] Modifications since the last update:\n";
    foreach (keys(%{$mod})) {
        print "\t".$mod->{$_}."\t$_\n";
    }
    print "\n";
    exit(0);
}

# Strip this list down to just modifications
foreach (keys(%{$mod})) {
    if ($mod->{$_} ne 'Mod') {
        delete($mod->{$_});
    }
}

if (! $new_data) {
    print "[*] Could not obtain the current version information from the update server\n";
    exit(0);
}

my $mver = CheckVersion();

if ( ($opts{u} || $opts{U}) && ! $mver) {
    print "[*] Could not determine the current Framework version.\n";
    exit(0);
}

if ($mver && $mver ne $FRAMEWORK) {

    if (! $opts{U}) {
        print "[*] ATTENTION: A new version of the Framework is available (v$mver)!\n";
        print "    To upgrade, execute msfupdate with the -U parameter.\n\n";
    }
    else {
        print "[*] Starting upgrade process to version $mver...\n";
    }
}

if ($opts{U} && $mver && $mver eq $FRAMEWORK) {
    print "[*] No version upgrade is necessary.\n";
    exit(0);
}

# Upgrade to a new major release version...
if ($opts{U}) {
 
  
    my $backupdir = 'backup_'. $FRAMEWORK;
    
    print "[*] WARNING: You are about to upgrade to a new major version of the\n";
    print "    Metasploit Framework. This process involves removing the current\n";
    print "    installation and downloading the new version, one file at a time.\n";
    print "    This process is slow and somewhat prone to failure. If you encounter\n";
    print "    any problems during the download, you *should* be able to simply\n";
    print "    restart msfupdate with the -u parameter\n\n";
    
    print "    If you have modified any of the files in the Framework directory,\n";
    print "    these will be saved to $backupdir. The same applies for any modules\n";
    print "    that you have added to this Framework installation. After the update\n";
    print "    is complete, you should be able to copy these modules from the\n";
    print "    backup directory ($backupdir) into the appropriate directories\n";
    print "    in the new installation.\n\n";

    print "    If you are using FreeBSD or any other operating that maintains\n";
    print "    a package for the Framework, we recommend that you use the system\n";
    print "    package manager to upgrade\n\n";
    
    print "    Please type 'yes' to initiate the upgrade process.\n";
    
    my $resp;
    while ($resp !~ /yes|no/i) {
        print "> ";
        $resp = <STDIN>;
        chomp($resp);
    }
    if ($resp =~ /no/i) {
        exit(0);
    }

    
    delete($now->{'./msfupdate'});
    delete($new->{'./msfupdate'});
    delete($mod->{'./msfupdate'});
    delete($upd->{'./msfupdate'});

    print "[*] Backing up modified files to $backupdir...\n";
    
    # Backup framework files that the user modified
    foreach my $file (keys %{$mod} ) {
        print "    --- MOD $file\n";
        my $data = ReadFile($file);
        WriteFile($backupdir .'/'. $file , $data);
    }
    
    # Backup files that the user created
    foreach my $file (keys %{$upd} ) {
        next if $upd->{$file} ne 'Del';
        print "    --- USR $file\n";
        my $data = ReadFile($file);
        WriteFile($backupdir .'/'. $file , $data);
    }   
    
    print "[*] Removing the current installation...\n";

    # Do not remove these files since we need them to update...
    my %docs_save = ('./docs/7f8d5320.0' => 1, './docs/cacert.pem' => 1);

    # Remove all files that are part of the framework
    foreach my $file (keys %{$now}) {
        next if exists($docs_save{$file});
        unlink($file);
    }

    # Remove all directories but 'docs'
    foreach my $dir (split(/\n/, ScanDirs('.', 0))) {
        next if $dir eq './docs';
        system("rm", "-rf", $dir);
    }
    
    # Bump up the framework version
    $FRAMEWORK = $mver;
    
    # Download the file list for the new framework version
    $new_data = DownloadFile($UPDATE_HOST, "$UPDATE_PATH/.current");

    # Rebuild the tables
    $new = Hashit($new_data);
    $now = {};
    $old = {};

    $mod = Diff($old, $now);
    $upx = Diff($old, $new);
    $upd = Diff($now, $new);
    
    # Configure some options
    $opts{a}++;
}




# They modified something, ask them what they want to do with it
if (! $opts{a} && keys(%{$mod})) {  
    print "[*] WARNING: You have made modifications to the\n";
    print "    following components of the Framework:\n\n";
    foreach (sort(keys(%{$mod}))) {
        print "\t".$_."\n";
    }
    print "\n";
    print "    Would you like to preserve these changes? If\n";
    print "    you say no, all local modifications will be\n";
    print "    overwritten by the updates.\n";
    print "\n";
    print "Preserve modifications (yes or no) ";
    my $resp;
    while ($resp !~ /yes|no/i) {
        print "> ";
        $resp = <STDIN>;
        chomp($resp);
    }
    if ($resp =~ /no/i) {
        $mod = {};
    }
}

foreach (keys(%{$upd})) {
    # Do not remove user-created files
    if ($upd->{$_} eq 'Del') {
        delete($upd->{$_});
    }

    # Ignore updates we already have
    if ($now->{$_} eq $new->{$_}) {
        delete($upd->{$_});
    }    
}


# Ignore locally modified files when -a is supplied
if ($opts{a}) {
    $mod = {};
}

# After all of this stuff, this is what we have
# - $mod is a table of anything the user wants to keep
# - $upd is a table of everything online new or updated


# The plan of attack is:
# - Iterate through each item in $upd, if there is a match in
#   $mod, we print a message and ignore the download for it.
#   We will delete anything with the Del status set in this
#   table. 
# - Once we have identified an update, we try to download it.
#   If an error occurs, either because the download fails or
#   the md5 does no match.
#
# - After all files have been processed, we rebuild the local
#   .current file and get ready for the next update.
#

if (! keys(%{$upd})) {
    print "[*] No new updates are available\n";
    exit(0);
}

print "[*] Update Task Summary\n\n";
foreach my $entry (keys(%{$upd})) {
    next if $opts{U};
    
    if ($mod->{$entry}) {
        print "\tIgnore $entry\n";
    }
    else {
        print "\tUpdate $entry\n";
    }
}
print "\n";

exit(0) if $opts{s};

if (! $opts{a}) {
    print "Continue? (yes or no) ";
    my $resp;
    while ($resp !~ /yes|no/i) {
        print "> ";
        $resp = <STDIN>;
        chomp($resp);
    }
    print "\n";
    if ($resp !~ /yes/i) {
        exit(0);
    }
}

my @tasks = sort(keys(%{$upd}));

# Force msfupdate to downloaded first...
if ($opts{U}) {
    unshift(@tasks, './msfupdate');
}

my $upd_tot = scalar(@tasks);
my $upd_cur = 0;

foreach my $entry (@tasks) {
    if ($mod->{$entry}) {
        next;
    } 
    my $data = DownloadFile($UPDATE_HOST, "$UPDATE_PATH/$entry");
    if ($new->{$entry} ne Digest::Perl::MD5::md5_hex($data)) {
        print "$entry: ". $new->{$entry} ." != ". Digest::Perl::MD5::md5_hex($data) ."\n";
        my $errmsg = $data ? 'checksum mismatch' : 'download failed';
        print "[*] Failed to update $entry: $errmsg\n";
        next;
    }
    
    # overwrite the local file O_o
    WriteFile($entry, $data);
    
    # set it executable since we dont track permissions
    chmod(0755, $entry);
    
    printf("[%.4d/%.4d - 0x%.6x bytes] $entry\n", ++$upd_cur, $upd_tot, length($data));
}

print "[*] Regenerating local file database\n";
$now_data = ScanFiles('.');
WriteFile('.current', $now_data);



sub Usage { 
    print STDERR "  Usage: $0 [options]>\n";
    print STDERR "Options:\n";
    print STDERR "         -h             You're looking at me baby\n";
    print STDERR "         -v             Display version information\n";
    print STDERR "         -u             Perform an online update via metasploit.com\n";
    print STDERR "         -s             Only display update tasks, do not actually download\n";
    print STDERR "         -m             Show any files locally modified since last update\n";
    print STDERR "         -a             Do not prompt, default to overwrite all files\n";
    print STDERR "         -x             Do not require confirmation for non-SSL updates\n";
    print STDERR "         -f             Disable ssl support entirely, use with -x to avoid warnings\n";
    # Developer options
    # print STDERR "         -r             Rebuild the local version database\n";
    print "\n";
    exit(0);
}

sub ScanFiles {
    my $dir = shift;
    my $res;
    my $hwn;
    
    opendir ($hwn, $dir) || return;
    
    while (defined(my $entry = readdir($hwn))) {
        my $path = "$dir/$entry";

        # ignore all symlinks
        next if -l $path;
        
        # ignore all leading dot files   
        next if $entry =~ /^\./;
        
        # ignore the backup directories
        next if $entry =~ /^backup_/;
        
        # recurse into directories
        if (-d $path) {
            $res .= ScanFiles($path);
        } 
        elsif (-f $path) {
            $res .= HashFile($path)."\t$path\n";;
        }
    }
    closedir($hwn);
    return $res;   
}

sub ScanDirs {
    my $dir = shift;
    my $dep = @_ ? shift() : 0;
    my $res;
    my $hwn;
    
    return if $dep == -1;
    opendir ($hwn, $dir) || return;
    
    while (defined(my $entry = readdir($hwn))) {
        my $path = "$dir/$entry";
        
        # ignore all symlinks
        next if -l $path; 
        
        # ignore the backup directories
        next if $entry =~ /^backup_/;
        
        # ignore all leading dot files   
        next if $entry =~ /^\./;
         
        # recurse into directories
        if (-d $path) {
            $res .= "$path\n";
            $res .= ScanDirs($path, $dep - 1);
        }
    }
    closedir($hwn);
    return $res;   
}



sub CheckVersion {
    my $data = DownloadFile($UPDATE_HOST, $UPDATE_PATH);
    my ($vers, $mtime) = split(/\s+/, $data);
    return $vers;
}

sub DownloadFile {
    my $host = shift;
    my $path = shift;
    my $port = $SSL_SUPPORT ? 443 : 80;
    my $data;
    
    $path = EscapeURI($path);
    
    my $sock = IO::Socket::INET->new
    (
        PeerAddr    => $host,
        PeerPort    => $port,
        Proto       => 'tcp',
    );
    
    if (! $sock) {
        print STDERR "[*] Could not connect to $host: $!\n";
        exit(0);
    }

    my $req = "GET $path HTTP/1.0\r\nUser-Agent: msfupdate/$REV $FRAMEWORK\r\n\r\n";

    if ($SSL_SUPPORT) { 
    
        # Reset the verified flag
        $SSL_VERIFIED = 0;

        # Create SSL Context
        my $ctx = Net::SSLeay::CTX_new();
       
        # Tell SSL to use the certificate in the docs directory 
        Net::SSLeay::CTX_load_verify_locations($ctx, '', $SSL_CERTS);
        
        # Configure the SSL call-back to prevent MiTM
        Net::SSLeay::CTX_set_verify($ctx, &Net::SSLeay::VERIFY_PEER, \&SSLVerify);
                
        # Configure session for maximum interoperability
        Net::SSLeay::CTX_set_options($ctx, &Net::SSLeay::OP_ALL);
        
        # Create a new SSL object with context
        my $ssl = Net::SSLeay::new($ctx);

        # Bind the SSL descriptor to the socket
        Net::SSLeay::set_fd($ssl, $sock->fileno);
        
        # Negotiate connection
        my $sslConn = Net::SSLeay::connect($ssl);

        if ($sslConn <= 0) {
            print STDERR "[*] SSL error:". Net::SSLeay::print_errs()."\n";
            $sock->close;
            return;
        }
        
        Net::SSLeay::ssl_write_all($ssl, $req);
        $sock->shutdown(1);    
        
        my $cert = Net::SSLeay::get_peer_certificate($ssl);
        
        $data = Net::SSLeay::ssl_read_all($ssl);
        
        Net::SSLeay::free ($ssl);
        Net::SSLeay::CTX_free ($ctx);
        $sock->close;
        
        $data = ProcessHTTP($data);
        return $data;
    }
    
    $sock->send($req);
    $sock->shutdown(1);
    while (<$sock>) { $data .= $_ }
    close ($sock);
    $data = ProcessHTTP($data);    
    return $data;
}

# Prevent MiTM attacks on the update downloads when run over SSL
sub SSLVerify {
    my ($ok, $x509_store_ctx) = @_;
    my $cert = Net::SSLeay::X509_STORE_CTX_get_current_cert($x509_store_ctx);
    
    if ($cert) {
        my $x509_issuer =  Net::SSLeay::X509_get_issuer_name($cert);
        my $issuer = Net::SSLeay::X509_NAME_oneline($x509_issuer);
        
        # differences between openssl 0.9.6 vs 0.9.7 (thanks par!)
        $issuer =~ s/Email/emailAddress/g;
        
        if ($ok && $issuer eq $SSL_ISSUER) {
            $SSL_VERIFIED++;
            return 1;
        }
    }
   
    return;
}

sub ProcessHTTP {
    my $http = shift;
    my $idx = index($http, "\r\n\r\n");
    return if -1 == $idx;
    my $head = substr($http, 0, $idx);
    my $body = substr($http, $idx + 4);
    return if $head !~ /HTTP\/1..\s+2/;
    return $body;  
}

sub WriteFile {
    my $file = shift;
    my $data = shift;

    my @path = split(/\//, $file);
    pop(@path);
    
    my $cdir = ".";
    foreach (@path) {
        $cdir .= "/".$_;
        if (! -d $cdir) {
            mkdir($cdir, 0755);
        }
    }
    
    open (my $out, ">$file") || return;
    print $out $data;
    close ($out);
}

sub ReadFile {
    my $path = shift;
    my $data;
    my $inp;
    
    open($inp, "<$path") || return;
    while (<$inp>) { $data .= $_ }
    close($inp);
    
    return $data;
}

sub HashFile {
    my $path = shift;
    my $data = ReadFile($path);
    return Digest::Perl::MD5::md5_hex($data);
}

sub Hashit {
    my $data = shift;
    my $hash = {};
    foreach my $line (split(/\n/, $data)) {
        my ($md5, $path) = $line =~ m/^([^\s]+)\s+(.*)/g;
        $hash->{$path} = $md5;
    }
    return $hash;
}

sub Diff {
    my $setA = shift;
    my $setB = shift;
    my $res;
    
    foreach (keys(%{$setA})) {
        if (exists($setB->{$_})) {
            if ($setA->{$_} ne $setB->{$_}) {
                $res->{$_} = 'Mod';
            }
        } 
        else {
            $res->{$_} = 'Del';
        }
    }
    
    foreach (keys(%{$setB})) {
        if (! exists($setA->{$_})) {
            $res->{$_} = 'New';
        }
    }
    
    return $res;
}

sub EscapeURI {
    my $path = shift;
	my %escapes = ();
	for (0..255) { $escapes{chr($_)} = sprintf("%%%02X", $_) }
	$path =~ s/([^A-Za-z0-9\-_.!~*'()\/])/$escapes{$1}/eg;
    return $path;
}



##                                                                       ##
#] msfupdate can run completely stand-alone with the MD5 module included [#
##                                                                       ##


##
#
# This library is free software; you can redistribute it and/or
# modify it under the same terms as Perl itself.
#
# Copyright 2000 Christian Lackas, Imperia Software Solutions
# Copyright 1998-1999 Gisle Aas.
# Copyright 1995-1996 Neil Winton.
# Copyright 1991-1992 RSA Data Security, Inc.
#
## 

package Digest::Perl::MD5;
use strict;
use integer;
use Exporter;
use vars qw($VERSION @ISA @EXPORTER @EXPORT_OK);

@EXPORT_OK = qw(md5 md5_hex md5_base64);

@ISA = 'Exporter';
$VERSION = '1.6';

# I-Vektor
sub A() { 0x67_45_23_01 }
sub B() { 0xef_cd_ab_89 }
sub C() { 0x98_ba_dc_fe }
sub D() { 0x10_32_54_76 }

# for internal use
sub MAX() { 0xFFFFFFFF }

# padd a message to a multiple of 64
sub padding {
    my $l = length (my $msg = shift() . chr(128));    
    $msg .= "\0" x (($l%64<=56?56:120)-$l%64);
    $l = ($l-1)*8;
    $msg .= pack 'VV', $l & MAX , ($l >> 16 >> 16);
}


sub rotate_left($$) {
	#$_[0] << $_[1] | $_[0] >> (32 - $_[1]);
	#my $right = $_[0] >> (32 - $_[1]);
	#my $rmask = (1 << $_[1]) - 1;
	($_[0] << $_[1]) | (( $_[0] >> (32 - $_[1])  )  & ((1 << $_[1]) - 1));
	#$_[0] << $_[1] | (($_[0]>> (32 - $_[1])) & (1 << (32 - $_[1])) - 1);
}

sub gen_code {
  # Discard upper 32 bits on 64 bit archs.
  my $MSK = ((1 << 16) << 16) ? ' & ' . MAX : '';
#	FF => "X0=rotate_left(((X1&X2)|(~X1&X3))+X0+X4+X6$MSK,X5)+X1$MSK;",
#	GG => "X0=rotate_left(((X1&X3)|(X2&(~X3)))+X0+X4+X6$MSK,X5)+X1$MSK;",
  my %f = (
	FF => "X0=rotate_left((X3^(X1&(X2^X3)))+X0+X4+X6$MSK,X5)+X1$MSK;",
	GG => "X0=rotate_left((X2^(X3&(X1^X2)))+X0+X4+X6$MSK,X5)+X1$MSK;",
	HH => "X0=rotate_left((X1^X2^X3)+X0+X4+X6$MSK,X5)+X1$MSK;",
	II => "X0=rotate_left((X2^(X1|(~X3)))+X0+X4+X6$MSK,X5)+X1$MSK;",
  );
  #unless ( (1 << 16) << 16) { %f = %{$CODES{'32bit'}} }
  #else { %f = %{$CODES{'64bit'}} }

  my %s = (  # shift lengths
	S11 => 7, S12 => 12, S13 => 17, S14 => 22, S21 => 5, S22 => 9, S23 => 14,
	S24 => 20, S31 => 4, S32 => 11, S33 => 16, S34 => 23, S41 => 6, S42 => 10,
	S43 => 15, S44 => 21
  );

  my $insert = "";
  while(<DATA>) {
	chomp;
	next unless /^[FGHI]/;
	my ($func,@x) = split /,/;
	my $c = $f{$func};
	$c =~ s/X(\d)/$x[$1]/g;
	$c =~ s/(S\d{2})/$s{$1}/;
        $c =~ s/^(.*)=rotate_left\((.*),(.*)\)\+(.*)$//;

	#my $rotate = "(($2 << $3) || (($2 >> (32 - $3)) & (1 << $2) - 1)))"; 
	$c = "\$r = $2;
        $1 = ((\$r << $3) | ((\$r >> (32 - $3))  & ((1 << $3) - 1))) + $4";
	$insert .= "\t$c\n";
  }
  close DATA;
  
  my $dump = '
  sub round {
	my ($a,$b,$c,$d) = @_[0 .. 3];
	my $r;

	' . $insert . '
	$_[0]+$a' . $MSK . ', $_[1]+$b ' . $MSK . 
        ', $_[2]+$c' . $MSK . ', $_[3]+$d' . $MSK . ';
  }';
  eval $dump;
  #print "$dump\n";
  #exit 0;
}

gen_code();

#########################################
# Private output converter functions:
sub _encode_hex { unpack 'H*', $_[0] }
sub _encode_base64 {
	my $res;
	while ($_[0] =~ /(.{1,45})/gs) {
		$res .= substr pack('u', $1), 1;
		chop $res;
	}
	$res =~ tr|` -_|AA-Za-z0-9+/|;#`
	chop $res; chop $res;
	$res
}

#########################################
# OOP interface:
sub new {
	my $proto = shift;
	my $class = ref $proto || $proto;
	my $self = {};
	bless $self, $class;
	$self->reset();
	$self
}

sub reset {
	my $self = shift;
	delete $self->{_data};
	$self->{_state} = [A,B,C,D];
	$self->{_length} = 0;
	$self
}

sub add {
	my $self = shift;
	$self->{_data} .= join '', @_ if @_;
	my ($i,$c);
	for $i (0 .. (length $self->{_data})/64-1) {
		my @X = unpack 'V16', substr $self->{_data}, $i*64, 64;
		@{$self->{_state}} = round(@{$self->{_state}},@X);
		++$c;
	}
	if ($c) {
		substr $self->{_data}, 0, $c*64, '';
		$self->{_length} += $c*64;
	}
	$self
}

sub finalize {
	my $self = shift;
	$self->{_data} .= chr(128);
    my $l = $self->{_length} + length $self->{_data};
    $self->{_data} .= "\0" x (($l%64<=56?56:120)-$l%64);
    $l = ($l-1)*8;
    $self->{_data} .= pack 'VV', $l & MAX , ($l >> 16 >> 16);
	$self->add();
	$self
}

sub addfile {
  	my ($self,$fh) = @_;
	if (!ref($fh) && ref(\$fh) ne "GLOB") {
	    require Symbol;
	    $fh = Symbol::qualify($fh, scalar caller);
	}
	# $self->{_data} .= do{local$/;<$fh>};
	my $read = 0;
	my $buffer = '';
	$self->add($buffer) while $read = read $fh, $buffer, 8192;
	die __PACKAGE__, " read failed: $!" unless defined $read;
	$self
}

sub add_bits {
}

sub digest {
	my $self = shift;
	$self->finalize();
	my $res = pack 'V4', @{$self->{_state}};
	$self->reset();
	$res
}

sub hexdigest {
	_encode_hex($_[0]->digest)
}

sub b64digest {
	_encode_base64($_[0]->digest)
}

sub clone {
	my $self = shift;
	my $clone = { 
		_state => [@{$self->{_state}}],
		_length => $self->{_length},
		_data => $self->{_data}
	};
	bless $clone, ref $self || $self;
}

#########################################
# Procedural interface:
sub md5 {
	my $message = padding(join'',@_);
	my ($a,$b,$c,$d) = (A,B,C,D);
	my $i;
	for $i (0 .. (length $message)/64-1) {
		my @X = unpack 'V16', substr $message,$i*64,64;	
		($a,$b,$c,$d) = round($a,$b,$c,$d,@X);
	}
	pack 'V4',$a,$b,$c,$d;
}
sub md5_hex { _encode_hex &md5 } 
sub md5_base64 { _encode_base64 &md5 }


1;

=head1 NAME

Digest::MD5::Perl - Perl implementation of Ron Rivests MD5 Algorithm

=head1 DISCLAIMER

This is B<not> an interface (like C<Digest::MD5>) but a Perl implementation of MD5.
It is written in perl only and because of this it is slow but it works without C-Code.
You should use C<Digest::MD5> instead of this module if it is available.
This module is only usefull for

=over 4

=item

computers where you cannot install C<Digest::MD5> (e.g. lack of a C-Compiler)

=item

encrypting only small amounts of data (less than one million bytes). I use it to
hash passwords.

=item

educational purposes

=back

=head1 SYNOPSIS

 # Functional style
 use Digest::MD5  qw(md5 md5_hex md5_base64);

 $hash = md5 $data;
 $hash = md5_hex $data;
 $hash = md5_base64 $data;
    

 # OO style
 use Digest::MD5;

 $ctx = Digest::MD5->new;

 $ctx->add($data);
 $ctx->addfile(*FILE);

 $digest = $ctx->digest;
 $digest = $ctx->hexdigest;
 $digest = $ctx->b64digest;

=head1 DESCRIPTION

This modules has the same interface as the much faster C<Digest::MD5>. So you can
easily exchange them, e.g.

	BEGIN {
	  eval {
	    require Digest::MD5;
	    import Digest::MD5 'md5_hex'
	  };
	  if ($@) { # ups, no Digest::MD5
	    require Digest::Perl::MD5;
	    import Digest::Perl::MD5 'md5_hex'
	  }		
	}

If the C<Digest::MD5> module is available it is used and if not you take
C<Digest::Perl::MD5>.

You can also install the Perl part of Digest::MD5 together with Digest::Perl::MD5
and use Digest::MD5 as normal, it falls back to Digest::Perl::MD5 if it
cannot load its object files.

For a detailed Documentation see the C<Digest::MD5> module.

=head1 EXAMPLES

The simplest way to use this library is to import the md5_hex()
function (or one of its cousins):

    use Digest::Perl::MD5 'md5_hex';
    print 'Digest is ', md5_hex('foobarbaz'), "\n";

The above example would print out the message

    Digest is 6df23dc03f9b54cc38a0fc1483df6e21

provided that the implementation is working correctly.  The same
checksum can also be calculated in OO style:

    use Digest::MD5;
    
    $md5 = Digest::MD5->new;
    $md5->add('foo', 'bar');
    $md5->add('baz');
    $digest = $md5->hexdigest;
    
    print "Digest is $digest\n";

The digest methods are destructive. That means you can only call them
once and the $md5 objects is reset after use. You can make a copy with clone:

	$md5->clone->hexdigest

=head1 LIMITATIONS

This implementation of the MD5 algorithm has some limitations:

=over 4

=item

It's slow, very slow. I've done my very best but Digest::MD5 is still about 100 times faster.
You can only encrypt Data up to one million bytes in an acceptable time. But it's very usefull
for encrypting small amounts of data like passwords.

=item

You can only encrypt up to 2^32 bits = 512 MB on 32bit archs. But You should
use C<Digest::MD5> for those amounts of data anyway.

=back

=head1 SEE ALSO

L<Digest::MD5>

L<md5(1)>

RFC 1321

tools/md5: a small BSD compatible md5 tool written in pure perl.

=head1 COPYRIGHT

This library is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.

 Copyright 2000 Christian Lackas, Imperia Software Solutions
 Copyright 1998-1999 Gisle Aas.
 Copyright 1995-1996 Neil Winton.
 Copyright 1991-1992 RSA Data Security, Inc.

The MD5 algorithm is defined in RFC 1321. The basic C code
implementing the algorithm is derived from that in the RFC and is
covered by the following copyright:

=over 4

=item

Copyright (C) 1991-1992, RSA Data Security, Inc. Created 1991. All
rights reserved.

License to copy and use this software is granted provided that it
is identified as the "RSA Data Security, Inc. MD5 Message-Digest
Algorithm" in all material mentioning or referencing this software
or this function.

License is also granted to make and use derivative works provided
that such works are identified as "derived from the RSA Data
Security, Inc. MD5 Message-Digest Algorithm" in all material
mentioning or referencing the derived work.

RSA Data Security, Inc. makes no representations concerning either
the merchantability of this software or the suitability of this
software for any particular purpose. It is provided "as is"
without express or implied warranty of any kind.

These notices must be retained in any copies of any part of this
documentation and/or software.

=back

This copyright does not prohibit distribution of any version of Perl
containing this extension under the terms of the GNU or Artistic
licenses.

=head1 AUTHORS

The original MD5 interface was written by Neil Winton
(<N.Winton (at) axion.bt.co.uk>).

C<Digest::MD5> was made by Gisle Aas <gisle (at) aas.no> (I took his Interface
and part of the documentation).

Thanks to Guido Flohr for his 'use integer'-hint.

This release was made by Christian Lackas <delta (at) lackas.net>.

=cut

__DATA__
FF,$a,$b,$c,$d,$_[4],7,0xd76aa478,/* 1 */
FF,$d,$a,$b,$c,$_[5],12,0xe8c7b756,/* 2 */
FF,$c,$d,$a,$b,$_[6],17,0x242070db,/* 3 */
FF,$b,$c,$d,$a,$_[7],22,0xc1bdceee,/* 4 */
FF,$a,$b,$c,$d,$_[8],7,0xf57c0faf,/* 5 */
FF,$d,$a,$b,$c,$_[9],12,0x4787c62a,/* 6 */
FF,$c,$d,$a,$b,$_[10],17,0xa8304613,/* 7 */
FF,$b,$c,$d,$a,$_[11],22,0xfd469501,/* 8 */
FF,$a,$b,$c,$d,$_[12],7,0x698098d8,/* 9 */
FF,$d,$a,$b,$c,$_[13],12,0x8b44f7af,/* 10 */
FF,$c,$d,$a,$b,$_[14],17,0xffff5bb1,/* 11 */
FF,$b,$c,$d,$a,$_[15],22,0x895cd7be,/* 12 */
FF,$a,$b,$c,$d,$_[16],7,0x6b901122,/* 13 */
FF,$d,$a,$b,$c,$_[17],12,0xfd987193,/* 14 */
FF,$c,$d,$a,$b,$_[18],17,0xa679438e,/* 15 */
FF,$b,$c,$d,$a,$_[19],22,0x49b40821,/* 16 */ 
GG,$a,$b,$c,$d,$_[5],5,0xf61e2562,/* 17 */
GG,$d,$a,$b,$c,$_[10],9,0xc040b340,/* 18 */
GG,$c,$d,$a,$b,$_[15],14,0x265e5a51,/* 19 */
GG,$b,$c,$d,$a,$_[4],20,0xe9b6c7aa,/* 20 */
GG,$a,$b,$c,$d,$_[9],5,0xd62f105d,/* 21 */
GG,$d,$a,$b,$c,$_[14],9,0x2441453,/* 22 */
GG,$c,$d,$a,$b,$_[19],14,0xd8a1e681,/* 23 */
GG,$b,$c,$d,$a,$_[8],20,0xe7d3fbc8,/* 24 */
GG,$a,$b,$c,$d,$_[13],5,0x21e1cde6,/* 25 */
GG,$d,$a,$b,$c,$_[18],9,0xc33707d6,/* 26 */
GG,$c,$d,$a,$b,$_[7],14,0xf4d50d87,/* 27 */
GG,$b,$c,$d,$a,$_[12],20,0x455a14ed,/* 28 */
GG,$a,$b,$c,$d,$_[17],5,0xa9e3e905,/* 29 */
GG,$d,$a,$b,$c,$_[6],9,0xfcefa3f8,/* 30 */
GG,$c,$d,$a,$b,$_[11],14,0x676f02d9,/* 31 */
GG,$b,$c,$d,$a,$_[16],20,0x8d2a4c8a,/* 32 */
HH,$a,$b,$c,$d,$_[9],4,0xfffa3942,/* 33 */
HH,$d,$a,$b,$c,$_[12],11,0x8771f681,/* 34 */
HH,$c,$d,$a,$b,$_[15],16,0x6d9d6122,/* 35 */
HH,$b,$c,$d,$a,$_[18],23,0xfde5380c,/* 36 */
HH,$a,$b,$c,$d,$_[5],4,0xa4beea44,/* 37 */
HH,$d,$a,$b,$c,$_[8],11,0x4bdecfa9,/* 38 */
HH,$c,$d,$a,$b,$_[11],16,0xf6bb4b60,/* 39 */
HH,$b,$c,$d,$a,$_[14],23,0xbebfbc70,/* 40 */
HH,$a,$b,$c,$d,$_[17],4,0x289b7ec6,/* 41 */
HH,$d,$a,$b,$c,$_[4],11,0xeaa127fa,/* 42 */
HH,$c,$d,$a,$b,$_[7],16,0xd4ef3085,/* 43 */
HH,$b,$c,$d,$a,$_[10],23,0x4881d05,/* 44 */
HH,$a,$b,$c,$d,$_[13],4,0xd9d4d039,/* 45 */
HH,$d,$a,$b,$c,$_[16],11,0xe6db99e5,/* 46 */
HH,$c,$d,$a,$b,$_[19],16,0x1fa27cf8,/* 47 */
HH,$b,$c,$d,$a,$_[6],23,0xc4ac5665,/* 48 */
II,$a,$b,$c,$d,$_[4],6,0xf4292244,/* 49 */
II,$d,$a,$b,$c,$_[11],10,0x432aff97,/* 50 */
II,$c,$d,$a,$b,$_[18],15,0xab9423a7,/* 51 */
II,$b,$c,$d,$a,$_[9],21,0xfc93a039,/* 52 */
II,$a,$b,$c,$d,$_[16],6,0x655b59c3,/* 53 */
II,$d,$a,$b,$c,$_[7],10,0x8f0ccc92,/* 54 */
II,$c,$d,$a,$b,$_[14],15,0xffeff47d,/* 55 */
II,$b,$c,$d,$a,$_[5],21,0x85845dd1,/* 56 */
II,$a,$b,$c,$d,$_[12],6,0x6fa87e4f,/* 57 */
II,$d,$a,$b,$c,$_[19],10,0xfe2ce6e0,/* 58 */
II,$c,$d,$a,$b,$_[10],15,0xa3014314,/* 59 */
II,$b,$c,$d,$a,$_[17],21,0x4e0811a1,/* 60 */
II,$a,$b,$c,$d,$_[8],6,0xf7537e82,/* 61 */
II,$d,$a,$b,$c,$_[15],10,0xbd3af235,/* 62 */
II,$c,$d,$a,$b,$_[6],15,0x2ad7d2bb,/* 63 */
II,$b,$c,$d,$a,$_[13],21,0xeb86d391,/* 64 */

1;

